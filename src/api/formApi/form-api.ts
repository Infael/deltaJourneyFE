/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Google Forms API
 * Reads and writes Google Forms and responses.
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";

import type {
  BatchUpdateFormRequest,
  BatchUpdateFormResponse,
  CreateWatchRequest,
  Empty,
  Form,
  FormResponse,
  FormsFormsBatchUpdateParams,
  FormsFormsCreateParams,
  FormsFormsGetParams,
  FormsFormsResponsesGetParams,
  FormsFormsResponsesListParams,
  FormsFormsWatchesCreateParams,
  FormsFormsWatchesDeleteParams,
  FormsFormsWatchesListParams,
  FormsFormsWatchesRenewParams,
  ListFormResponsesResponse,
  ListWatchesResponse,
  RenewWatchRequest,
  Watch,
} from "./form-api.schemas";

import { fetchClient } from "../fetchClient";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create a new form using the title given in the provided form message in the request. *Important:* Only the form.info.title and form.info.document_title fields are copied to the new form. All other fields including the form description, items and settings are disallowed. To create a new form and add items, you must first call forms.create to create an empty form with a title and (optional) document title, and then call forms.update to add the items.
 */
export const formsFormsCreate = (
  form: NonReadonly<Form>,
  params?: FormsFormsCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Form>(
    {
      url: `https://forms.googleapis.com/v1/forms`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: form,
      params,
      signal,
    },
    options,
  );
};

export const getFormsFormsCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsFormsCreate>>,
    TError,
    { data: NonReadonly<Form>; params?: FormsFormsCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsFormsCreate>>,
  TError,
  { data: NonReadonly<Form>; params?: FormsFormsCreateParams },
  TContext
> => {
  const mutationKey = ["formsFormsCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsFormsCreate>>,
    { data: NonReadonly<Form>; params?: FormsFormsCreateParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return formsFormsCreate(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsFormsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof formsFormsCreate>>>;
export type FormsFormsCreateMutationBody = NonReadonly<Form>;
export type FormsFormsCreateMutationError = unknown;

export const useFormsFormsCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsFormsCreate>>,
      TError,
      { data: NonReadonly<Form>; params?: FormsFormsCreateParams },
      TContext
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof formsFormsCreate>>,
  TError,
  { data: NonReadonly<Form>; params?: FormsFormsCreateParams },
  TContext
> => {
  const mutationOptions = getFormsFormsCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Get a form.
 */
export const formsFormsGet = (
  formId: string,
  params?: FormsFormsGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Form>(
    { url: `https://forms.googleapis.com/v1/forms/${formId}`, method: "GET", params, signal },
    options,
  );
};

export const getFormsFormsGetQueryKey = (formId: string, params?: FormsFormsGetParams) => {
  return [`https://forms.googleapis.com/v1/forms/${formId}`, ...(params ? [params] : [])] as const;
};

export const getFormsFormsGetQueryOptions = <TData = Awaited<ReturnType<typeof formsFormsGet>>, TError = unknown>(
  formId: string,
  params?: FormsFormsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsFormsGetQueryKey(formId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsFormsGet>>> = ({ signal }) =>
    formsFormsGet(formId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!formId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsFormsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsFormsGetQueryResult = NonNullable<Awaited<ReturnType<typeof formsFormsGet>>>;
export type FormsFormsGetQueryError = unknown;

export function useFormsFormsGet<TData = Awaited<ReturnType<typeof formsFormsGet>>, TError = unknown>(
  formId: string,
  params: undefined | FormsFormsGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsFormsGet>>,
          TError,
          Awaited<ReturnType<typeof formsFormsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsGet<TData = Awaited<ReturnType<typeof formsFormsGet>>, TError = unknown>(
  formId: string,
  params?: FormsFormsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsFormsGet>>,
          TError,
          Awaited<ReturnType<typeof formsFormsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsGet<TData = Awaited<ReturnType<typeof formsFormsGet>>, TError = unknown>(
  formId: string,
  params?: FormsFormsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsFormsGet<TData = Awaited<ReturnType<typeof formsFormsGet>>, TError = unknown>(
  formId: string,
  params?: FormsFormsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsFormsGetQueryOptions(formId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsFormsGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsFormsGet>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsFormsGetQueryKey(formId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsFormsGet>>> = ({ signal }) =>
    formsFormsGet(formId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsFormsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsFormsGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof formsFormsGet>>>;
export type FormsFormsGetSuspenseQueryError = unknown;

export function useFormsFormsGetSuspense<TData = Awaited<ReturnType<typeof formsFormsGet>>, TError = unknown>(
  formId: string,
  params: undefined | FormsFormsGetParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsGetSuspense<TData = Awaited<ReturnType<typeof formsFormsGet>>, TError = unknown>(
  formId: string,
  params?: FormsFormsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsGetSuspense<TData = Awaited<ReturnType<typeof formsFormsGet>>, TError = unknown>(
  formId: string,
  params?: FormsFormsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsFormsGetSuspense<TData = Awaited<ReturnType<typeof formsFormsGet>>, TError = unknown>(
  formId: string,
  params?: FormsFormsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsFormsGetSuspenseQueryOptions(formId, params, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List a form's responses.
 */
export const formsFormsResponsesList = (
  formId: string,
  params?: FormsFormsResponsesListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<ListFormResponsesResponse>(
    { url: `https://forms.googleapis.com/v1/forms/${formId}/responses`, method: "GET", params, signal },
    options,
  );
};

export const getFormsFormsResponsesListQueryKey = (formId: string, params?: FormsFormsResponsesListParams) => {
  return [`https://forms.googleapis.com/v1/forms/${formId}/responses`, ...(params ? [params] : [])] as const;
};

export const getFormsFormsResponsesListQueryOptions = <
  TData = Awaited<ReturnType<typeof formsFormsResponsesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsResponsesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsFormsResponsesListQueryKey(formId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsFormsResponsesList>>> = ({ signal }) =>
    formsFormsResponsesList(formId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!formId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsFormsResponsesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsFormsResponsesListQueryResult = NonNullable<Awaited<ReturnType<typeof formsFormsResponsesList>>>;
export type FormsFormsResponsesListQueryError = unknown;

export function useFormsFormsResponsesList<
  TData = Awaited<ReturnType<typeof formsFormsResponsesList>>,
  TError = unknown,
>(
  formId: string,
  params: undefined | FormsFormsResponsesListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsFormsResponsesList>>,
          TError,
          Awaited<ReturnType<typeof formsFormsResponsesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsResponsesList<
  TData = Awaited<ReturnType<typeof formsFormsResponsesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsResponsesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsFormsResponsesList>>,
          TError,
          Awaited<ReturnType<typeof formsFormsResponsesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsResponsesList<
  TData = Awaited<ReturnType<typeof formsFormsResponsesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsResponsesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsFormsResponsesList<
  TData = Awaited<ReturnType<typeof formsFormsResponsesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsResponsesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsFormsResponsesListQueryOptions(formId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsFormsResponsesListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsFormsResponsesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsResponsesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsFormsResponsesListQueryKey(formId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsFormsResponsesList>>> = ({ signal }) =>
    formsFormsResponsesList(formId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsFormsResponsesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsFormsResponsesListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsFormsResponsesList>>
>;
export type FormsFormsResponsesListSuspenseQueryError = unknown;

export function useFormsFormsResponsesListSuspense<
  TData = Awaited<ReturnType<typeof formsFormsResponsesList>>,
  TError = unknown,
>(
  formId: string,
  params: undefined | FormsFormsResponsesListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsResponsesListSuspense<
  TData = Awaited<ReturnType<typeof formsFormsResponsesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsResponsesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsResponsesListSuspense<
  TData = Awaited<ReturnType<typeof formsFormsResponsesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsResponsesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsFormsResponsesListSuspense<
  TData = Awaited<ReturnType<typeof formsFormsResponsesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsResponsesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsFormsResponsesListSuspenseQueryOptions(formId, params, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get one response from the form.
 */
export const formsFormsResponsesGet = (
  formId: string,
  responseId: string,
  params?: FormsFormsResponsesGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<FormResponse>(
    { url: `https://forms.googleapis.com/v1/forms/${formId}/responses/${responseId}`, method: "GET", params, signal },
    options,
  );
};

export const getFormsFormsResponsesGetQueryKey = (
  formId: string,
  responseId: string,
  params?: FormsFormsResponsesGetParams,
) => {
  return [
    `https://forms.googleapis.com/v1/forms/${formId}/responses/${responseId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFormsFormsResponsesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof formsFormsResponsesGet>>,
  TError = unknown,
>(
  formId: string,
  responseId: string,
  params?: FormsFormsResponsesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsFormsResponsesGetQueryKey(formId, responseId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsFormsResponsesGet>>> = ({ signal }) =>
    formsFormsResponsesGet(formId, responseId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(formId && responseId), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsFormsResponsesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsFormsResponsesGetQueryResult = NonNullable<Awaited<ReturnType<typeof formsFormsResponsesGet>>>;
export type FormsFormsResponsesGetQueryError = unknown;

export function useFormsFormsResponsesGet<TData = Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError = unknown>(
  formId: string,
  responseId: string,
  params: undefined | FormsFormsResponsesGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsFormsResponsesGet>>,
          TError,
          Awaited<ReturnType<typeof formsFormsResponsesGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsResponsesGet<TData = Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError = unknown>(
  formId: string,
  responseId: string,
  params?: FormsFormsResponsesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsFormsResponsesGet>>,
          TError,
          Awaited<ReturnType<typeof formsFormsResponsesGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsResponsesGet<TData = Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError = unknown>(
  formId: string,
  responseId: string,
  params?: FormsFormsResponsesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsFormsResponsesGet<TData = Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError = unknown>(
  formId: string,
  responseId: string,
  params?: FormsFormsResponsesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsFormsResponsesGetQueryOptions(formId, responseId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsFormsResponsesGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsFormsResponsesGet>>,
  TError = unknown,
>(
  formId: string,
  responseId: string,
  params?: FormsFormsResponsesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsFormsResponsesGetQueryKey(formId, responseId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsFormsResponsesGet>>> = ({ signal }) =>
    formsFormsResponsesGet(formId, responseId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsFormsResponsesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsFormsResponsesGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof formsFormsResponsesGet>>>;
export type FormsFormsResponsesGetSuspenseQueryError = unknown;

export function useFormsFormsResponsesGetSuspense<
  TData = Awaited<ReturnType<typeof formsFormsResponsesGet>>,
  TError = unknown,
>(
  formId: string,
  responseId: string,
  params: undefined | FormsFormsResponsesGetParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsResponsesGetSuspense<
  TData = Awaited<ReturnType<typeof formsFormsResponsesGet>>,
  TError = unknown,
>(
  formId: string,
  responseId: string,
  params?: FormsFormsResponsesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsResponsesGetSuspense<
  TData = Awaited<ReturnType<typeof formsFormsResponsesGet>>,
  TError = unknown,
>(
  formId: string,
  responseId: string,
  params?: FormsFormsResponsesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsFormsResponsesGetSuspense<
  TData = Awaited<ReturnType<typeof formsFormsResponsesGet>>,
  TError = unknown,
>(
  formId: string,
  responseId: string,
  params?: FormsFormsResponsesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsResponsesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsFormsResponsesGetSuspenseQueryOptions(formId, responseId, params, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Return a list of the watches owned by the invoking project. The maximum number of watches is two: For each invoker, the limit is one for each event type per form.
 */
export const formsFormsWatchesList = (
  formId: string,
  params?: FormsFormsWatchesListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<ListWatchesResponse>(
    { url: `https://forms.googleapis.com/v1/forms/${formId}/watches`, method: "GET", params, signal },
    options,
  );
};

export const getFormsFormsWatchesListQueryKey = (formId: string, params?: FormsFormsWatchesListParams) => {
  return [`https://forms.googleapis.com/v1/forms/${formId}/watches`, ...(params ? [params] : [])] as const;
};

export const getFormsFormsWatchesListQueryOptions = <
  TData = Awaited<ReturnType<typeof formsFormsWatchesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsWatchesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsWatchesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsFormsWatchesListQueryKey(formId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsFormsWatchesList>>> = ({ signal }) =>
    formsFormsWatchesList(formId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!formId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsFormsWatchesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsFormsWatchesListQueryResult = NonNullable<Awaited<ReturnType<typeof formsFormsWatchesList>>>;
export type FormsFormsWatchesListQueryError = unknown;

export function useFormsFormsWatchesList<TData = Awaited<ReturnType<typeof formsFormsWatchesList>>, TError = unknown>(
  formId: string,
  params: undefined | FormsFormsWatchesListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsWatchesList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsFormsWatchesList>>,
          TError,
          Awaited<ReturnType<typeof formsFormsWatchesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsWatchesList<TData = Awaited<ReturnType<typeof formsFormsWatchesList>>, TError = unknown>(
  formId: string,
  params?: FormsFormsWatchesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsWatchesList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsFormsWatchesList>>,
          TError,
          Awaited<ReturnType<typeof formsFormsWatchesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsWatchesList<TData = Awaited<ReturnType<typeof formsFormsWatchesList>>, TError = unknown>(
  formId: string,
  params?: FormsFormsWatchesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsWatchesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsFormsWatchesList<TData = Awaited<ReturnType<typeof formsFormsWatchesList>>, TError = unknown>(
  formId: string,
  params?: FormsFormsWatchesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof formsFormsWatchesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsFormsWatchesListQueryOptions(formId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsFormsWatchesListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsFormsWatchesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsWatchesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsWatchesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsFormsWatchesListQueryKey(formId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsFormsWatchesList>>> = ({ signal }) =>
    formsFormsWatchesList(formId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsFormsWatchesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsFormsWatchesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof formsFormsWatchesList>>>;
export type FormsFormsWatchesListSuspenseQueryError = unknown;

export function useFormsFormsWatchesListSuspense<
  TData = Awaited<ReturnType<typeof formsFormsWatchesList>>,
  TError = unknown,
>(
  formId: string,
  params: undefined | FormsFormsWatchesListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsWatchesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsWatchesListSuspense<
  TData = Awaited<ReturnType<typeof formsFormsWatchesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsWatchesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsWatchesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsFormsWatchesListSuspense<
  TData = Awaited<ReturnType<typeof formsFormsWatchesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsWatchesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsWatchesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsFormsWatchesListSuspense<
  TData = Awaited<ReturnType<typeof formsFormsWatchesList>>,
  TError = unknown,
>(
  formId: string,
  params?: FormsFormsWatchesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsFormsWatchesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsFormsWatchesListSuspenseQueryOptions(formId, params, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new watch. If a watch ID is provided, it must be unused. For each invoking project, the per form limit is one watch per Watch.EventType. A watch expires seven days after it is created (see Watch.expire_time).
 */
export const formsFormsWatchesCreate = (
  formId: string,
  createWatchRequest: CreateWatchRequest,
  params?: FormsFormsWatchesCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Watch>(
    {
      url: `https://forms.googleapis.com/v1/forms/${formId}/watches`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createWatchRequest,
      params,
      signal,
    },
    options,
  );
};

export const getFormsFormsWatchesCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsFormsWatchesCreate>>,
    TError,
    { formId: string; data: CreateWatchRequest; params?: FormsFormsWatchesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsFormsWatchesCreate>>,
  TError,
  { formId: string; data: CreateWatchRequest; params?: FormsFormsWatchesCreateParams },
  TContext
> => {
  const mutationKey = ["formsFormsWatchesCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsFormsWatchesCreate>>,
    { formId: string; data: CreateWatchRequest; params?: FormsFormsWatchesCreateParams }
  > = (props) => {
    const { formId, data, params } = props ?? {};

    return formsFormsWatchesCreate(formId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsFormsWatchesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof formsFormsWatchesCreate>>>;
export type FormsFormsWatchesCreateMutationBody = CreateWatchRequest;
export type FormsFormsWatchesCreateMutationError = unknown;

export const useFormsFormsWatchesCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsFormsWatchesCreate>>,
      TError,
      { formId: string; data: CreateWatchRequest; params?: FormsFormsWatchesCreateParams },
      TContext
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof formsFormsWatchesCreate>>,
  TError,
  { formId: string; data: CreateWatchRequest; params?: FormsFormsWatchesCreateParams },
  TContext
> => {
  const mutationOptions = getFormsFormsWatchesCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Delete a watch.
 */
export const formsFormsWatchesDelete = (
  formId: string,
  watchId: string,
  params?: FormsFormsWatchesDeleteParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<Empty>(
    { url: `https://forms.googleapis.com/v1/forms/${formId}/watches/${watchId}`, method: "DELETE", params },
    options,
  );
};

export const getFormsFormsWatchesDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsFormsWatchesDelete>>,
    TError,
    { formId: string; watchId: string; params?: FormsFormsWatchesDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsFormsWatchesDelete>>,
  TError,
  { formId: string; watchId: string; params?: FormsFormsWatchesDeleteParams },
  TContext
> => {
  const mutationKey = ["formsFormsWatchesDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsFormsWatchesDelete>>,
    { formId: string; watchId: string; params?: FormsFormsWatchesDeleteParams }
  > = (props) => {
    const { formId, watchId, params } = props ?? {};

    return formsFormsWatchesDelete(formId, watchId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsFormsWatchesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof formsFormsWatchesDelete>>>;

export type FormsFormsWatchesDeleteMutationError = unknown;

export const useFormsFormsWatchesDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsFormsWatchesDelete>>,
      TError,
      { formId: string; watchId: string; params?: FormsFormsWatchesDeleteParams },
      TContext
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof formsFormsWatchesDelete>>,
  TError,
  { formId: string; watchId: string; params?: FormsFormsWatchesDeleteParams },
  TContext
> => {
  const mutationOptions = getFormsFormsWatchesDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Renew an existing watch for seven days. The state of the watch after renewal is `ACTIVE`, and the `expire_time` is seven days from the renewal. Renewing a watch in an error state (e.g. `SUSPENDED`) succeeds if the error is no longer present, but fail otherwise. After a watch has expired, RenewWatch returns `NOT_FOUND`.
 */
export const formsFormsWatchesRenew = (
  formId: string,
  watchId: string,
  renewWatchRequest: RenewWatchRequest,
  params?: FormsFormsWatchesRenewParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Watch>(
    {
      url: `https://forms.googleapis.com/v1/forms/${formId}/watches/${watchId}:renew`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: renewWatchRequest,
      params,
      signal,
    },
    options,
  );
};

export const getFormsFormsWatchesRenewMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsFormsWatchesRenew>>,
    TError,
    { formId: string; watchId: string; data: RenewWatchRequest; params?: FormsFormsWatchesRenewParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsFormsWatchesRenew>>,
  TError,
  { formId: string; watchId: string; data: RenewWatchRequest; params?: FormsFormsWatchesRenewParams },
  TContext
> => {
  const mutationKey = ["formsFormsWatchesRenew"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsFormsWatchesRenew>>,
    { formId: string; watchId: string; data: RenewWatchRequest; params?: FormsFormsWatchesRenewParams }
  > = (props) => {
    const { formId, watchId, data, params } = props ?? {};

    return formsFormsWatchesRenew(formId, watchId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsFormsWatchesRenewMutationResult = NonNullable<Awaited<ReturnType<typeof formsFormsWatchesRenew>>>;
export type FormsFormsWatchesRenewMutationBody = RenewWatchRequest;
export type FormsFormsWatchesRenewMutationError = unknown;

export const useFormsFormsWatchesRenew = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsFormsWatchesRenew>>,
      TError,
      { formId: string; watchId: string; data: RenewWatchRequest; params?: FormsFormsWatchesRenewParams },
      TContext
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof formsFormsWatchesRenew>>,
  TError,
  { formId: string; watchId: string; data: RenewWatchRequest; params?: FormsFormsWatchesRenewParams },
  TContext
> => {
  const mutationOptions = getFormsFormsWatchesRenewMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Change the form with a batch of updates.
 */
export const formsFormsBatchUpdate = (
  formId: string,
  batchUpdateFormRequest: BatchUpdateFormRequest,
  params?: FormsFormsBatchUpdateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<BatchUpdateFormResponse>(
    {
      url: `https://forms.googleapis.com/v1/forms/${formId}:batchUpdate`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: batchUpdateFormRequest,
      params,
      signal,
    },
    options,
  );
};

export const getFormsFormsBatchUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsFormsBatchUpdate>>,
    TError,
    { formId: string; data: BatchUpdateFormRequest; params?: FormsFormsBatchUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsFormsBatchUpdate>>,
  TError,
  { formId: string; data: BatchUpdateFormRequest; params?: FormsFormsBatchUpdateParams },
  TContext
> => {
  const mutationKey = ["formsFormsBatchUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsFormsBatchUpdate>>,
    { formId: string; data: BatchUpdateFormRequest; params?: FormsFormsBatchUpdateParams }
  > = (props) => {
    const { formId, data, params } = props ?? {};

    return formsFormsBatchUpdate(formId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsFormsBatchUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof formsFormsBatchUpdate>>>;
export type FormsFormsBatchUpdateMutationBody = BatchUpdateFormRequest;
export type FormsFormsBatchUpdateMutationError = unknown;

export const useFormsFormsBatchUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsFormsBatchUpdate>>,
      TError,
      { formId: string; data: BatchUpdateFormRequest; params?: FormsFormsBatchUpdateParams },
      TContext
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof formsFormsBatchUpdate>>,
  TError,
  { formId: string; data: BatchUpdateFormRequest; params?: FormsFormsBatchUpdateParams },
  TContext
> => {
  const mutationOptions = getFormsFormsBatchUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
