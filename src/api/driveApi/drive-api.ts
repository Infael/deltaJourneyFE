/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 * OpenAPI spec version: v3
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";

import type {
  About,
  App,
  AppList,
  ChangeList,
  Channel,
  Comment,
  CommentList,
  Drive,
  DriveAboutGetParams,
  DriveAppsGetParams,
  DriveAppsListParams,
  DriveChangesGetStartPageTokenParams,
  DriveChangesListParams,
  DriveChangesWatchParams,
  DriveChannelsStopParams,
  DriveCommentsCreateParams,
  DriveCommentsDeleteParams,
  DriveCommentsGetParams,
  DriveCommentsListParams,
  DriveCommentsUpdateParams,
  DriveDrivesCreateParams,
  DriveDrivesDeleteParams,
  DriveDrivesGetParams,
  DriveDrivesHideParams,
  DriveDrivesListParams,
  DriveDrivesUnhideParams,
  DriveDrivesUpdateParams,
  DriveFilesCopyParams,
  DriveFilesCreateParams,
  DriveFilesDeleteParams,
  DriveFilesEmptyTrashParams,
  DriveFilesExportParams,
  DriveFilesGenerateIdsParams,
  DriveFilesGetParams,
  DriveFilesListLabelsParams,
  DriveFilesListParams,
  DriveFilesModifyLabelsParams,
  DriveFilesUpdateParams,
  DriveFilesWatchParams,
  DriveList,
  DrivePermissionsCreateParams,
  DrivePermissionsDeleteParams,
  DrivePermissionsGetParams,
  DrivePermissionsListParams,
  DrivePermissionsUpdateParams,
  DriveRepliesCreateParams,
  DriveRepliesDeleteParams,
  DriveRepliesGetParams,
  DriveRepliesListParams,
  DriveRepliesUpdateParams,
  DriveRevisionsDeleteParams,
  DriveRevisionsGetParams,
  DriveRevisionsListParams,
  DriveRevisionsUpdateParams,
  DriveTeamdrivesCreateParams,
  DriveTeamdrivesDeleteParams,
  DriveTeamdrivesGetParams,
  DriveTeamdrivesListParams,
  DriveTeamdrivesUpdateParams,
  File,
  FileList,
  GeneratedIds,
  LabelList,
  ModifyLabelsRequest,
  ModifyLabelsResponse,
  Permission,
  PermissionList,
  Reply,
  ReplyList,
  Revision,
  RevisionList,
  StartPageToken,
  TeamDrive,
  TeamDriveList,
} from "./drive-api.schemas";

import { fetchClient } from "../fetchClient";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Gets information about the user, the user's Drive, and system capabilities.
 */
export const driveAboutGet = (
  params?: DriveAboutGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<About>(
    { url: `https://www.googleapis.com/drive/v3/about`, method: "GET", params, signal },
    options,
  );
};

export const getDriveAboutGetQueryKey = (params?: DriveAboutGetParams) => {
  return [`https://www.googleapis.com/drive/v3/about`, ...(params ? [params] : [])] as const;
};

export const getDriveAboutGetQueryOptions = <TData = Awaited<ReturnType<typeof driveAboutGet>>, TError = unknown>(
  params?: DriveAboutGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAboutGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveAboutGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveAboutGet>>> = ({ signal }) =>
    driveAboutGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveAboutGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveAboutGetQueryResult = NonNullable<Awaited<ReturnType<typeof driveAboutGet>>>;
export type DriveAboutGetQueryError = unknown;

export function useDriveAboutGet<TData = Awaited<ReturnType<typeof driveAboutGet>>, TError = unknown>(
  params: undefined | DriveAboutGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAboutGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveAboutGet>>,
          TError,
          Awaited<ReturnType<typeof driveAboutGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAboutGet<TData = Awaited<ReturnType<typeof driveAboutGet>>, TError = unknown>(
  params?: DriveAboutGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAboutGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveAboutGet>>,
          TError,
          Awaited<ReturnType<typeof driveAboutGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAboutGet<TData = Awaited<ReturnType<typeof driveAboutGet>>, TError = unknown>(
  params?: DriveAboutGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAboutGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveAboutGet<TData = Awaited<ReturnType<typeof driveAboutGet>>, TError = unknown>(
  params?: DriveAboutGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAboutGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveAboutGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveAboutGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveAboutGet>>,
  TError = unknown,
>(
  params?: DriveAboutGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAboutGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveAboutGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveAboutGet>>> = ({ signal }) =>
    driveAboutGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveAboutGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveAboutGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveAboutGet>>>;
export type DriveAboutGetSuspenseQueryError = unknown;

export function useDriveAboutGetSuspense<TData = Awaited<ReturnType<typeof driveAboutGet>>, TError = unknown>(
  params: undefined | DriveAboutGetParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAboutGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAboutGetSuspense<TData = Awaited<ReturnType<typeof driveAboutGet>>, TError = unknown>(
  params?: DriveAboutGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAboutGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAboutGetSuspense<TData = Awaited<ReturnType<typeof driveAboutGet>>, TError = unknown>(
  params?: DriveAboutGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAboutGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveAboutGetSuspense<TData = Awaited<ReturnType<typeof driveAboutGet>>, TError = unknown>(
  params?: DriveAboutGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAboutGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveAboutGetSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Lists a user's installed apps.
 */
export const driveAppsList = (
  params?: DriveAppsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<AppList>(
    { url: `https://www.googleapis.com/drive/v3/apps`, method: "GET", params, signal },
    options,
  );
};

export const getDriveAppsListQueryKey = (params?: DriveAppsListParams) => {
  return [`https://www.googleapis.com/drive/v3/apps`, ...(params ? [params] : [])] as const;
};

export const getDriveAppsListQueryOptions = <TData = Awaited<ReturnType<typeof driveAppsList>>, TError = unknown>(
  params?: DriveAppsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAppsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveAppsListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveAppsList>>> = ({ signal }) =>
    driveAppsList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveAppsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveAppsListQueryResult = NonNullable<Awaited<ReturnType<typeof driveAppsList>>>;
export type DriveAppsListQueryError = unknown;

export function useDriveAppsList<TData = Awaited<ReturnType<typeof driveAppsList>>, TError = unknown>(
  params: undefined | DriveAppsListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAppsList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveAppsList>>,
          TError,
          Awaited<ReturnType<typeof driveAppsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAppsList<TData = Awaited<ReturnType<typeof driveAppsList>>, TError = unknown>(
  params?: DriveAppsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAppsList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveAppsList>>,
          TError,
          Awaited<ReturnType<typeof driveAppsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAppsList<TData = Awaited<ReturnType<typeof driveAppsList>>, TError = unknown>(
  params?: DriveAppsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAppsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveAppsList<TData = Awaited<ReturnType<typeof driveAppsList>>, TError = unknown>(
  params?: DriveAppsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAppsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveAppsListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveAppsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveAppsList>>,
  TError = unknown,
>(
  params?: DriveAppsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAppsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveAppsListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveAppsList>>> = ({ signal }) =>
    driveAppsList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveAppsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveAppsListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveAppsList>>>;
export type DriveAppsListSuspenseQueryError = unknown;

export function useDriveAppsListSuspense<TData = Awaited<ReturnType<typeof driveAppsList>>, TError = unknown>(
  params: undefined | DriveAppsListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAppsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAppsListSuspense<TData = Awaited<ReturnType<typeof driveAppsList>>, TError = unknown>(
  params?: DriveAppsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAppsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAppsListSuspense<TData = Awaited<ReturnType<typeof driveAppsList>>, TError = unknown>(
  params?: DriveAppsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAppsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveAppsListSuspense<TData = Awaited<ReturnType<typeof driveAppsList>>, TError = unknown>(
  params?: DriveAppsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAppsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveAppsListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Gets a specific app.
 */
export const driveAppsGet = (
  appId: string,
  params?: DriveAppsGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<App>(
    { url: `https://www.googleapis.com/drive/v3/apps/${appId}`, method: "GET", params, signal },
    options,
  );
};

export const getDriveAppsGetQueryKey = (appId: string, params?: DriveAppsGetParams) => {
  return [`https://www.googleapis.com/drive/v3/apps/${appId}`, ...(params ? [params] : [])] as const;
};

export const getDriveAppsGetQueryOptions = <TData = Awaited<ReturnType<typeof driveAppsGet>>, TError = unknown>(
  appId: string,
  params?: DriveAppsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAppsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveAppsGetQueryKey(appId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveAppsGet>>> = ({ signal }) =>
    driveAppsGet(appId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!appId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveAppsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveAppsGetQueryResult = NonNullable<Awaited<ReturnType<typeof driveAppsGet>>>;
export type DriveAppsGetQueryError = unknown;

export function useDriveAppsGet<TData = Awaited<ReturnType<typeof driveAppsGet>>, TError = unknown>(
  appId: string,
  params: undefined | DriveAppsGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAppsGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveAppsGet>>,
          TError,
          Awaited<ReturnType<typeof driveAppsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAppsGet<TData = Awaited<ReturnType<typeof driveAppsGet>>, TError = unknown>(
  appId: string,
  params?: DriveAppsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAppsGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveAppsGet>>,
          TError,
          Awaited<ReturnType<typeof driveAppsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAppsGet<TData = Awaited<ReturnType<typeof driveAppsGet>>, TError = unknown>(
  appId: string,
  params?: DriveAppsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAppsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveAppsGet<TData = Awaited<ReturnType<typeof driveAppsGet>>, TError = unknown>(
  appId: string,
  params?: DriveAppsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveAppsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveAppsGetQueryOptions(appId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveAppsGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof driveAppsGet>>, TError = unknown>(
  appId: string,
  params?: DriveAppsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAppsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveAppsGetQueryKey(appId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveAppsGet>>> = ({ signal }) =>
    driveAppsGet(appId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveAppsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveAppsGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveAppsGet>>>;
export type DriveAppsGetSuspenseQueryError = unknown;

export function useDriveAppsGetSuspense<TData = Awaited<ReturnType<typeof driveAppsGet>>, TError = unknown>(
  appId: string,
  params: undefined | DriveAppsGetParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAppsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAppsGetSuspense<TData = Awaited<ReturnType<typeof driveAppsGet>>, TError = unknown>(
  appId: string,
  params?: DriveAppsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAppsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveAppsGetSuspense<TData = Awaited<ReturnType<typeof driveAppsGet>>, TError = unknown>(
  appId: string,
  params?: DriveAppsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAppsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveAppsGetSuspense<TData = Awaited<ReturnType<typeof driveAppsGet>>, TError = unknown>(
  appId: string,
  params?: DriveAppsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveAppsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveAppsGetSuspenseQueryOptions(appId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Lists the changes for a user or shared drive.
 */
export const driveChangesList = (
  params: DriveChangesListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<ChangeList>(
    { url: `https://www.googleapis.com/drive/v3/changes`, method: "GET", params, signal },
    options,
  );
};

export const getDriveChangesListQueryKey = (params: DriveChangesListParams) => {
  return [`https://www.googleapis.com/drive/v3/changes`, ...(params ? [params] : [])] as const;
};

export const getDriveChangesListQueryOptions = <TData = Awaited<ReturnType<typeof driveChangesList>>, TError = unknown>(
  params: DriveChangesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveChangesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveChangesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveChangesList>>> = ({ signal }) =>
    driveChangesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveChangesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveChangesListQueryResult = NonNullable<Awaited<ReturnType<typeof driveChangesList>>>;
export type DriveChangesListQueryError = unknown;

export function useDriveChangesList<TData = Awaited<ReturnType<typeof driveChangesList>>, TError = unknown>(
  params: DriveChangesListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveChangesList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveChangesList>>,
          TError,
          Awaited<ReturnType<typeof driveChangesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveChangesList<TData = Awaited<ReturnType<typeof driveChangesList>>, TError = unknown>(
  params: DriveChangesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveChangesList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveChangesList>>,
          TError,
          Awaited<ReturnType<typeof driveChangesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveChangesList<TData = Awaited<ReturnType<typeof driveChangesList>>, TError = unknown>(
  params: DriveChangesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveChangesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveChangesList<TData = Awaited<ReturnType<typeof driveChangesList>>, TError = unknown>(
  params: DriveChangesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveChangesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveChangesListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveChangesListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveChangesList>>,
  TError = unknown,
>(
  params: DriveChangesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveChangesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveChangesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveChangesList>>> = ({ signal }) =>
    driveChangesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveChangesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveChangesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveChangesList>>>;
export type DriveChangesListSuspenseQueryError = unknown;

export function useDriveChangesListSuspense<TData = Awaited<ReturnType<typeof driveChangesList>>, TError = unknown>(
  params: DriveChangesListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveChangesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveChangesListSuspense<TData = Awaited<ReturnType<typeof driveChangesList>>, TError = unknown>(
  params: DriveChangesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveChangesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveChangesListSuspense<TData = Awaited<ReturnType<typeof driveChangesList>>, TError = unknown>(
  params: DriveChangesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveChangesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveChangesListSuspense<TData = Awaited<ReturnType<typeof driveChangesList>>, TError = unknown>(
  params: DriveChangesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveChangesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveChangesListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Gets the starting pageToken for listing future changes.
 */
export const driveChangesGetStartPageToken = (
  params?: DriveChangesGetStartPageTokenParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<StartPageToken>(
    { url: `https://www.googleapis.com/drive/v3/changes/startPageToken`, method: "GET", params, signal },
    options,
  );
};

export const getDriveChangesGetStartPageTokenQueryKey = (params?: DriveChangesGetStartPageTokenParams) => {
  return [`https://www.googleapis.com/drive/v3/changes/startPageToken`, ...(params ? [params] : [])] as const;
};

export const getDriveChangesGetStartPageTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
  TError = unknown,
>(
  params?: DriveChangesGetStartPageTokenParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveChangesGetStartPageTokenQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>> = ({ signal }) =>
    driveChangesGetStartPageToken(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveChangesGetStartPageTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof driveChangesGetStartPageToken>>
>;
export type DriveChangesGetStartPageTokenQueryError = unknown;

export function useDriveChangesGetStartPageToken<
  TData = Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
  TError = unknown,
>(
  params: undefined | DriveChangesGetStartPageTokenParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
          TError,
          Awaited<ReturnType<typeof driveChangesGetStartPageToken>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveChangesGetStartPageToken<
  TData = Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
  TError = unknown,
>(
  params?: DriveChangesGetStartPageTokenParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
          TError,
          Awaited<ReturnType<typeof driveChangesGetStartPageToken>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveChangesGetStartPageToken<
  TData = Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
  TError = unknown,
>(
  params?: DriveChangesGetStartPageTokenParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveChangesGetStartPageToken<
  TData = Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
  TError = unknown,
>(
  params?: DriveChangesGetStartPageTokenParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveChangesGetStartPageTokenQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveChangesGetStartPageTokenSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
  TError = unknown,
>(
  params?: DriveChangesGetStartPageTokenParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveChangesGetStartPageTokenQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>> = ({ signal }) =>
    driveChangesGetStartPageToken(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveChangesGetStartPageTokenSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof driveChangesGetStartPageToken>>
>;
export type DriveChangesGetStartPageTokenSuspenseQueryError = unknown;

export function useDriveChangesGetStartPageTokenSuspense<
  TData = Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
  TError = unknown,
>(
  params: undefined | DriveChangesGetStartPageTokenParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveChangesGetStartPageTokenSuspense<
  TData = Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
  TError = unknown,
>(
  params?: DriveChangesGetStartPageTokenParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveChangesGetStartPageTokenSuspense<
  TData = Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
  TError = unknown,
>(
  params?: DriveChangesGetStartPageTokenParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveChangesGetStartPageTokenSuspense<
  TData = Awaited<ReturnType<typeof driveChangesGetStartPageToken>>,
  TError = unknown,
>(
  params?: DriveChangesGetStartPageTokenParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveChangesGetStartPageToken>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveChangesGetStartPageTokenSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Subscribes to changes for a user.
 */
export const driveChangesWatch = (
  channel: Channel,
  params: DriveChangesWatchParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Channel>(
    {
      url: `https://www.googleapis.com/drive/v3/changes/watch`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: channel,
      params,
      signal,
    },
    options,
  );
};

export const getDriveChangesWatchMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveChangesWatch>>,
    TError,
    { data: Channel; params: DriveChangesWatchParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveChangesWatch>>,
  TError,
  { data: Channel; params: DriveChangesWatchParams },
  TContext
> => {
  const mutationKey = ["driveChangesWatch"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveChangesWatch>>,
    { data: Channel; params: DriveChangesWatchParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return driveChangesWatch(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveChangesWatchMutationResult = NonNullable<Awaited<ReturnType<typeof driveChangesWatch>>>;
export type DriveChangesWatchMutationBody = Channel;
export type DriveChangesWatchMutationError = unknown;

export const useDriveChangesWatch = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveChangesWatch>>,
    TError,
    { data: Channel; params: DriveChangesWatchParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveChangesWatch>>,
  TError,
  { data: Channel; params: DriveChangesWatchParams },
  TContext
> => {
  const mutationOptions = getDriveChangesWatchMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Stops watching resources through this channel.
 */
export const driveChannelsStop = (
  channel: Channel,
  params?: DriveChannelsStopParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<void>(
    {
      url: `https://www.googleapis.com/drive/v3/channels/stop`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: channel,
      params,
      signal,
    },
    options,
  );
};

export const getDriveChannelsStopMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveChannelsStop>>,
    TError,
    { data: Channel; params?: DriveChannelsStopParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveChannelsStop>>,
  TError,
  { data: Channel; params?: DriveChannelsStopParams },
  TContext
> => {
  const mutationKey = ["driveChannelsStop"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveChannelsStop>>,
    { data: Channel; params?: DriveChannelsStopParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return driveChannelsStop(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveChannelsStopMutationResult = NonNullable<Awaited<ReturnType<typeof driveChannelsStop>>>;
export type DriveChannelsStopMutationBody = Channel;
export type DriveChannelsStopMutationError = unknown;

export const useDriveChannelsStop = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveChannelsStop>>,
    TError,
    { data: Channel; params?: DriveChannelsStopParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveChannelsStop>>,
  TError,
  { data: Channel; params?: DriveChannelsStopParams },
  TContext
> => {
  const mutationOptions = getDriveChannelsStopMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 *  Lists the user's shared drives. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for shared drives](/drive/api/guides/search-shareddrives) guide.
 */
export const driveDrivesList = (
  params?: DriveDrivesListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<DriveList>(
    { url: `https://www.googleapis.com/drive/v3/drives`, method: "GET", params, signal },
    options,
  );
};

export const getDriveDrivesListQueryKey = (params?: DriveDrivesListParams) => {
  return [`https://www.googleapis.com/drive/v3/drives`, ...(params ? [params] : [])] as const;
};

export const getDriveDrivesListQueryOptions = <TData = Awaited<ReturnType<typeof driveDrivesList>>, TError = unknown>(
  params?: DriveDrivesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveDrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveDrivesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveDrivesList>>> = ({ signal }) =>
    driveDrivesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveDrivesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveDrivesListQueryResult = NonNullable<Awaited<ReturnType<typeof driveDrivesList>>>;
export type DriveDrivesListQueryError = unknown;

export function useDriveDrivesList<TData = Awaited<ReturnType<typeof driveDrivesList>>, TError = unknown>(
  params: undefined | DriveDrivesListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveDrivesList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveDrivesList>>,
          TError,
          Awaited<ReturnType<typeof driveDrivesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveDrivesList<TData = Awaited<ReturnType<typeof driveDrivesList>>, TError = unknown>(
  params?: DriveDrivesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveDrivesList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveDrivesList>>,
          TError,
          Awaited<ReturnType<typeof driveDrivesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveDrivesList<TData = Awaited<ReturnType<typeof driveDrivesList>>, TError = unknown>(
  params?: DriveDrivesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveDrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveDrivesList<TData = Awaited<ReturnType<typeof driveDrivesList>>, TError = unknown>(
  params?: DriveDrivesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveDrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveDrivesListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveDrivesListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveDrivesList>>,
  TError = unknown,
>(
  params?: DriveDrivesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveDrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveDrivesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveDrivesList>>> = ({ signal }) =>
    driveDrivesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveDrivesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveDrivesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveDrivesList>>>;
export type DriveDrivesListSuspenseQueryError = unknown;

export function useDriveDrivesListSuspense<TData = Awaited<ReturnType<typeof driveDrivesList>>, TError = unknown>(
  params: undefined | DriveDrivesListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveDrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveDrivesListSuspense<TData = Awaited<ReturnType<typeof driveDrivesList>>, TError = unknown>(
  params?: DriveDrivesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveDrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveDrivesListSuspense<TData = Awaited<ReturnType<typeof driveDrivesList>>, TError = unknown>(
  params?: DriveDrivesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveDrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveDrivesListSuspense<TData = Awaited<ReturnType<typeof driveDrivesList>>, TError = unknown>(
  params?: DriveDrivesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveDrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveDrivesListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a shared drive.
 */
export const driveDrivesCreate = (
  drive: Drive,
  params: DriveDrivesCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Drive>(
    {
      url: `https://www.googleapis.com/drive/v3/drives`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: drive,
      params,
      signal,
    },
    options,
  );
};

export const getDriveDrivesCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveDrivesCreate>>,
    TError,
    { data: Drive; params: DriveDrivesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveDrivesCreate>>,
  TError,
  { data: Drive; params: DriveDrivesCreateParams },
  TContext
> => {
  const mutationKey = ["driveDrivesCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveDrivesCreate>>,
    { data: Drive; params: DriveDrivesCreateParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return driveDrivesCreate(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveDrivesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof driveDrivesCreate>>>;
export type DriveDrivesCreateMutationBody = Drive;
export type DriveDrivesCreateMutationError = unknown;

export const useDriveDrivesCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveDrivesCreate>>,
    TError,
    { data: Drive; params: DriveDrivesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveDrivesCreate>>,
  TError,
  { data: Drive; params: DriveDrivesCreateParams },
  TContext
> => {
  const mutationOptions = getDriveDrivesCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Permanently deletes a shared drive for which the user is an `organizer`. The shared drive cannot contain any untrashed items.
 */
export const driveDrivesDelete = (
  driveId: string,
  params?: DriveDrivesDeleteParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<void>(
    { url: `https://www.googleapis.com/drive/v3/drives/${driveId}`, method: "DELETE", params },
    options,
  );
};

export const getDriveDrivesDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveDrivesDelete>>,
    TError,
    { driveId: string; params?: DriveDrivesDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveDrivesDelete>>,
  TError,
  { driveId: string; params?: DriveDrivesDeleteParams },
  TContext
> => {
  const mutationKey = ["driveDrivesDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveDrivesDelete>>,
    { driveId: string; params?: DriveDrivesDeleteParams }
  > = (props) => {
    const { driveId, params } = props ?? {};

    return driveDrivesDelete(driveId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveDrivesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof driveDrivesDelete>>>;

export type DriveDrivesDeleteMutationError = unknown;

export const useDriveDrivesDelete = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveDrivesDelete>>,
    TError,
    { driveId: string; params?: DriveDrivesDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveDrivesDelete>>,
  TError,
  { driveId: string; params?: DriveDrivesDeleteParams },
  TContext
> => {
  const mutationOptions = getDriveDrivesDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Gets a shared drive's metadata by ID.
 */
export const driveDrivesGet = (
  driveId: string,
  params?: DriveDrivesGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Drive>(
    { url: `https://www.googleapis.com/drive/v3/drives/${driveId}`, method: "GET", params, signal },
    options,
  );
};

export const getDriveDrivesGetQueryKey = (driveId: string, params?: DriveDrivesGetParams) => {
  return [`https://www.googleapis.com/drive/v3/drives/${driveId}`, ...(params ? [params] : [])] as const;
};

export const getDriveDrivesGetQueryOptions = <TData = Awaited<ReturnType<typeof driveDrivesGet>>, TError = unknown>(
  driveId: string,
  params?: DriveDrivesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveDrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveDrivesGetQueryKey(driveId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveDrivesGet>>> = ({ signal }) =>
    driveDrivesGet(driveId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!driveId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveDrivesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveDrivesGetQueryResult = NonNullable<Awaited<ReturnType<typeof driveDrivesGet>>>;
export type DriveDrivesGetQueryError = unknown;

export function useDriveDrivesGet<TData = Awaited<ReturnType<typeof driveDrivesGet>>, TError = unknown>(
  driveId: string,
  params: undefined | DriveDrivesGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveDrivesGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveDrivesGet>>,
          TError,
          Awaited<ReturnType<typeof driveDrivesGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveDrivesGet<TData = Awaited<ReturnType<typeof driveDrivesGet>>, TError = unknown>(
  driveId: string,
  params?: DriveDrivesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveDrivesGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveDrivesGet>>,
          TError,
          Awaited<ReturnType<typeof driveDrivesGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveDrivesGet<TData = Awaited<ReturnType<typeof driveDrivesGet>>, TError = unknown>(
  driveId: string,
  params?: DriveDrivesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveDrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveDrivesGet<TData = Awaited<ReturnType<typeof driveDrivesGet>>, TError = unknown>(
  driveId: string,
  params?: DriveDrivesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveDrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveDrivesGetQueryOptions(driveId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveDrivesGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveDrivesGet>>,
  TError = unknown,
>(
  driveId: string,
  params?: DriveDrivesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveDrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveDrivesGetQueryKey(driveId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveDrivesGet>>> = ({ signal }) =>
    driveDrivesGet(driveId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveDrivesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveDrivesGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveDrivesGet>>>;
export type DriveDrivesGetSuspenseQueryError = unknown;

export function useDriveDrivesGetSuspense<TData = Awaited<ReturnType<typeof driveDrivesGet>>, TError = unknown>(
  driveId: string,
  params: undefined | DriveDrivesGetParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveDrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveDrivesGetSuspense<TData = Awaited<ReturnType<typeof driveDrivesGet>>, TError = unknown>(
  driveId: string,
  params?: DriveDrivesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveDrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveDrivesGetSuspense<TData = Awaited<ReturnType<typeof driveDrivesGet>>, TError = unknown>(
  driveId: string,
  params?: DriveDrivesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveDrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveDrivesGetSuspense<TData = Awaited<ReturnType<typeof driveDrivesGet>>, TError = unknown>(
  driveId: string,
  params?: DriveDrivesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveDrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveDrivesGetSuspenseQueryOptions(driveId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates the metadate for a shared drive.
 */
export const driveDrivesUpdate = (
  driveId: string,
  drive: Drive,
  params?: DriveDrivesUpdateParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<Drive>(
    {
      url: `https://www.googleapis.com/drive/v3/drives/${driveId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: drive,
      params,
    },
    options,
  );
};

export const getDriveDrivesUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveDrivesUpdate>>,
    TError,
    { driveId: string; data: Drive; params?: DriveDrivesUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveDrivesUpdate>>,
  TError,
  { driveId: string; data: Drive; params?: DriveDrivesUpdateParams },
  TContext
> => {
  const mutationKey = ["driveDrivesUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveDrivesUpdate>>,
    { driveId: string; data: Drive; params?: DriveDrivesUpdateParams }
  > = (props) => {
    const { driveId, data, params } = props ?? {};

    return driveDrivesUpdate(driveId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveDrivesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof driveDrivesUpdate>>>;
export type DriveDrivesUpdateMutationBody = Drive;
export type DriveDrivesUpdateMutationError = unknown;

export const useDriveDrivesUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveDrivesUpdate>>,
    TError,
    { driveId: string; data: Drive; params?: DriveDrivesUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveDrivesUpdate>>,
  TError,
  { driveId: string; data: Drive; params?: DriveDrivesUpdateParams },
  TContext
> => {
  const mutationOptions = getDriveDrivesUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Hides a shared drive from the default view.
 */
export const driveDrivesHide = (
  driveId: string,
  params?: DriveDrivesHideParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Drive>(
    { url: `https://www.googleapis.com/drive/v3/drives/${driveId}/hide`, method: "POST", params, signal },
    options,
  );
};

export const getDriveDrivesHideMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveDrivesHide>>,
    TError,
    { driveId: string; params?: DriveDrivesHideParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveDrivesHide>>,
  TError,
  { driveId: string; params?: DriveDrivesHideParams },
  TContext
> => {
  const mutationKey = ["driveDrivesHide"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveDrivesHide>>,
    { driveId: string; params?: DriveDrivesHideParams }
  > = (props) => {
    const { driveId, params } = props ?? {};

    return driveDrivesHide(driveId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveDrivesHideMutationResult = NonNullable<Awaited<ReturnType<typeof driveDrivesHide>>>;

export type DriveDrivesHideMutationError = unknown;

export const useDriveDrivesHide = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveDrivesHide>>,
    TError,
    { driveId: string; params?: DriveDrivesHideParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveDrivesHide>>,
  TError,
  { driveId: string; params?: DriveDrivesHideParams },
  TContext
> => {
  const mutationOptions = getDriveDrivesHideMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Restores a shared drive to the default view.
 */
export const driveDrivesUnhide = (
  driveId: string,
  params?: DriveDrivesUnhideParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Drive>(
    { url: `https://www.googleapis.com/drive/v3/drives/${driveId}/unhide`, method: "POST", params, signal },
    options,
  );
};

export const getDriveDrivesUnhideMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveDrivesUnhide>>,
    TError,
    { driveId: string; params?: DriveDrivesUnhideParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveDrivesUnhide>>,
  TError,
  { driveId: string; params?: DriveDrivesUnhideParams },
  TContext
> => {
  const mutationKey = ["driveDrivesUnhide"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveDrivesUnhide>>,
    { driveId: string; params?: DriveDrivesUnhideParams }
  > = (props) => {
    const { driveId, params } = props ?? {};

    return driveDrivesUnhide(driveId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveDrivesUnhideMutationResult = NonNullable<Awaited<ReturnType<typeof driveDrivesUnhide>>>;

export type DriveDrivesUnhideMutationError = unknown;

export const useDriveDrivesUnhide = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveDrivesUnhide>>,
    TError,
    { driveId: string; params?: DriveDrivesUnhideParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveDrivesUnhide>>,
  TError,
  { driveId: string; params?: DriveDrivesUnhideParams },
  TContext
> => {
  const mutationOptions = getDriveDrivesUnhideMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 *  Lists the user's files. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for files & folders](/drive/api/guides/search-files) guide. *Note:* This method returns *all* files by default, including trashed files. If you don't want trashed files to appear in the list, use the `trashed=false` query parameter to remove trashed files from the results.
 */
export const driveFilesList = (
  params?: DriveFilesListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<FileList>(
    { url: `https://www.googleapis.com/drive/v3/files`, method: "GET", params, signal },
    options,
  );
};

export const getDriveFilesListQueryKey = (params?: DriveFilesListParams) => {
  return [`https://www.googleapis.com/drive/v3/files`, ...(params ? [params] : [])] as const;
};

export const getDriveFilesListQueryOptions = <TData = Awaited<ReturnType<typeof driveFilesList>>, TError = unknown>(
  params?: DriveFilesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveFilesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveFilesList>>> = ({ signal }) =>
    driveFilesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveFilesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveFilesListQueryResult = NonNullable<Awaited<ReturnType<typeof driveFilesList>>>;
export type DriveFilesListQueryError = unknown;

export function useDriveFilesList<TData = Awaited<ReturnType<typeof driveFilesList>>, TError = unknown>(
  params: undefined | DriveFilesListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveFilesList>>,
          TError,
          Awaited<ReturnType<typeof driveFilesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesList<TData = Awaited<ReturnType<typeof driveFilesList>>, TError = unknown>(
  params?: DriveFilesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveFilesList>>,
          TError,
          Awaited<ReturnType<typeof driveFilesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesList<TData = Awaited<ReturnType<typeof driveFilesList>>, TError = unknown>(
  params?: DriveFilesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveFilesList<TData = Awaited<ReturnType<typeof driveFilesList>>, TError = unknown>(
  params?: DriveFilesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveFilesListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveFilesListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveFilesList>>,
  TError = unknown,
>(
  params?: DriveFilesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveFilesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveFilesList>>> = ({ signal }) =>
    driveFilesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveFilesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveFilesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveFilesList>>>;
export type DriveFilesListSuspenseQueryError = unknown;

export function useDriveFilesListSuspense<TData = Awaited<ReturnType<typeof driveFilesList>>, TError = unknown>(
  params: undefined | DriveFilesListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesListSuspense<TData = Awaited<ReturnType<typeof driveFilesList>>, TError = unknown>(
  params?: DriveFilesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesListSuspense<TData = Awaited<ReturnType<typeof driveFilesList>>, TError = unknown>(
  params?: DriveFilesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveFilesListSuspense<TData = Awaited<ReturnType<typeof driveFilesList>>, TError = unknown>(
  params?: DriveFilesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveFilesListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 *  Creates a new file. This method supports an *\/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*`*\/*` Note: Specify a valid MIME type, rather than the literal `*\/*` value. The literal `*\/*` is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads). Apps creating shortcuts with `files.create` must specify the MIME type `application/vnd.google-apps.shortcut`. Apps should specify a file extension in the `name` property when inserting files with the API. For example, an operation to insert a JPEG file should specify something like `"name": "cat.jpg"` in the metadata. Subsequent `GET` requests include the read-only `fileExtension` property populated with the extension originally specified in the `title` property. When a Google Drive user requests to download a file, or when the file is downloaded through the sync client, Drive builds a full filename (with extension) based on the title. In cases where the extension is missing, Drive attempts to determine the extension based on the file's MIME type.
 */
export const driveFilesCreate = (
  file: NonReadonly<File>,
  params?: DriveFilesCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<File>(
    {
      url: `https://www.googleapis.com/drive/v3/files`,
      method: "POST",
      headers: { "Content-Type": "application/octet-stream" },
      data: file,
      params,
      signal,
    },
    options,
  );
};

export const getDriveFilesCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesCreate>>,
    TError,
    { data: NonReadonly<File>; params?: DriveFilesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveFilesCreate>>,
  TError,
  { data: NonReadonly<File>; params?: DriveFilesCreateParams },
  TContext
> => {
  const mutationKey = ["driveFilesCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveFilesCreate>>,
    { data: NonReadonly<File>; params?: DriveFilesCreateParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return driveFilesCreate(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveFilesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof driveFilesCreate>>>;
export type DriveFilesCreateMutationBody = NonReadonly<File>;
export type DriveFilesCreateMutationError = unknown;

export const useDriveFilesCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesCreate>>,
    TError,
    { data: NonReadonly<File>; params?: DriveFilesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveFilesCreate>>,
  TError,
  { data: NonReadonly<File>; params?: DriveFilesCreateParams },
  TContext
> => {
  const mutationOptions = getDriveFilesCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Generates a set of file IDs which can be provided in create or copy requests.
 */
export const driveFilesGenerateIds = (
  params?: DriveFilesGenerateIdsParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GeneratedIds>(
    { url: `https://www.googleapis.com/drive/v3/files/generateIds`, method: "GET", params, signal },
    options,
  );
};

export const getDriveFilesGenerateIdsQueryKey = (params?: DriveFilesGenerateIdsParams) => {
  return [`https://www.googleapis.com/drive/v3/files/generateIds`, ...(params ? [params] : [])] as const;
};

export const getDriveFilesGenerateIdsQueryOptions = <
  TData = Awaited<ReturnType<typeof driveFilesGenerateIds>>,
  TError = unknown,
>(
  params?: DriveFilesGenerateIdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveFilesGenerateIdsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveFilesGenerateIds>>> = ({ signal }) =>
    driveFilesGenerateIds(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveFilesGenerateIds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveFilesGenerateIdsQueryResult = NonNullable<Awaited<ReturnType<typeof driveFilesGenerateIds>>>;
export type DriveFilesGenerateIdsQueryError = unknown;

export function useDriveFilesGenerateIds<TData = Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError = unknown>(
  params: undefined | DriveFilesGenerateIdsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveFilesGenerateIds>>,
          TError,
          Awaited<ReturnType<typeof driveFilesGenerateIds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesGenerateIds<TData = Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError = unknown>(
  params?: DriveFilesGenerateIdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveFilesGenerateIds>>,
          TError,
          Awaited<ReturnType<typeof driveFilesGenerateIds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesGenerateIds<TData = Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError = unknown>(
  params?: DriveFilesGenerateIdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveFilesGenerateIds<TData = Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError = unknown>(
  params?: DriveFilesGenerateIdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveFilesGenerateIdsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveFilesGenerateIdsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveFilesGenerateIds>>,
  TError = unknown,
>(
  params?: DriveFilesGenerateIdsParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveFilesGenerateIdsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveFilesGenerateIds>>> = ({ signal }) =>
    driveFilesGenerateIds(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveFilesGenerateIds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveFilesGenerateIdsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveFilesGenerateIds>>>;
export type DriveFilesGenerateIdsSuspenseQueryError = unknown;

export function useDriveFilesGenerateIdsSuspense<
  TData = Awaited<ReturnType<typeof driveFilesGenerateIds>>,
  TError = unknown,
>(
  params: undefined | DriveFilesGenerateIdsParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesGenerateIdsSuspense<
  TData = Awaited<ReturnType<typeof driveFilesGenerateIds>>,
  TError = unknown,
>(
  params?: DriveFilesGenerateIdsParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesGenerateIdsSuspense<
  TData = Awaited<ReturnType<typeof driveFilesGenerateIds>>,
  TError = unknown,
>(
  params?: DriveFilesGenerateIdsParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveFilesGenerateIdsSuspense<
  TData = Awaited<ReturnType<typeof driveFilesGenerateIds>>,
  TError = unknown,
>(
  params?: DriveFilesGenerateIdsParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesGenerateIds>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveFilesGenerateIdsSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Permanently deletes all of the user's trashed files.
 */
export const driveFilesEmptyTrash = (
  params?: DriveFilesEmptyTrashParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<void>(
    { url: `https://www.googleapis.com/drive/v3/files/trash`, method: "DELETE", params },
    options,
  );
};

export const getDriveFilesEmptyTrashMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesEmptyTrash>>,
    TError,
    { params?: DriveFilesEmptyTrashParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveFilesEmptyTrash>>,
  TError,
  { params?: DriveFilesEmptyTrashParams },
  TContext
> => {
  const mutationKey = ["driveFilesEmptyTrash"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveFilesEmptyTrash>>,
    { params?: DriveFilesEmptyTrashParams }
  > = (props) => {
    const { params } = props ?? {};

    return driveFilesEmptyTrash(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveFilesEmptyTrashMutationResult = NonNullable<Awaited<ReturnType<typeof driveFilesEmptyTrash>>>;

export type DriveFilesEmptyTrashMutationError = unknown;

export const useDriveFilesEmptyTrash = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesEmptyTrash>>,
    TError,
    { params?: DriveFilesEmptyTrashParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveFilesEmptyTrash>>,
  TError,
  { params?: DriveFilesEmptyTrashParams },
  TContext
> => {
  const mutationOptions = getDriveFilesEmptyTrashMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive, the user must be an `organizer` on the parent folder. If the target is a folder, all descendants owned by the user are also deleted.
 */
export const driveFilesDelete = (
  fileId: string,
  params?: DriveFilesDeleteParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<void>(
    { url: `https://www.googleapis.com/drive/v3/files/${fileId}`, method: "DELETE", params },
    options,
  );
};

export const getDriveFilesDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesDelete>>,
    TError,
    { fileId: string; params?: DriveFilesDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveFilesDelete>>,
  TError,
  { fileId: string; params?: DriveFilesDeleteParams },
  TContext
> => {
  const mutationKey = ["driveFilesDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveFilesDelete>>,
    { fileId: string; params?: DriveFilesDeleteParams }
  > = (props) => {
    const { fileId, params } = props ?? {};

    return driveFilesDelete(fileId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveFilesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof driveFilesDelete>>>;

export type DriveFilesDeleteMutationError = unknown;

export const useDriveFilesDelete = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesDelete>>,
    TError,
    { fileId: string; params?: DriveFilesDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveFilesDelete>>,
  TError,
  { fileId: string; params?: DriveFilesDeleteParams },
  TContext
> => {
  const mutationOptions = getDriveFilesDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 *  Gets a file's metadata or content by ID. If you provide the URL parameter `alt=media`, then the response includes the file contents in the response body. Downloading content with `alt=media` only works if the file is stored in Drive. To download Google Docs, Sheets, and Slides use [`files.export`](/drive/api/reference/rest/v3/files/export) instead. For more information, see [Download & export files](/drive/api/guides/manage-downloads).
 */
export const driveFilesGet = (
  fileId: string,
  params?: DriveFilesGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<File>(
    { url: `https://www.googleapis.com/drive/v3/files/${fileId}`, method: "GET", params, signal },
    options,
  );
};

export const getDriveFilesGetMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesGet>>,
    TError,
    { fileId: string; params?: DriveFilesGetParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveFilesGet>>,
  TError,
  { fileId: string; params?: DriveFilesGetParams },
  TContext
> => {
  const mutationKey = ["driveFilesGet"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveFilesGet>>,
    { fileId: string; params?: DriveFilesGetParams }
  > = (props) => {
    const { fileId, params } = props ?? {};

    return driveFilesGet(fileId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveFilesGetMutationResult = NonNullable<Awaited<ReturnType<typeof driveFilesGet>>>;

export type DriveFilesGetMutationError = unknown;

export const useDriveFilesGet = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesGet>>,
    TError,
    { fileId: string; params?: DriveFilesGetParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveFilesGet>>,
  TError,
  { fileId: string; params?: DriveFilesGetParams },
  TContext
> => {
  const mutationOptions = getDriveFilesGetMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 *  Updates a file's metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might be changed automatically, such as `modifiedDate`. This method supports patch semantics. This method supports an *\/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*`*\/*` Note: Specify a valid MIME type, rather than the literal `*\/*` value. The literal `*\/*` is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads).
 */
export const driveFilesUpdate = (
  fileId: string,
  file: NonReadonly<File>,
  params?: DriveFilesUpdateParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<File>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/octet-stream" },
      data: file,
      params,
    },
    options,
  );
};

export const getDriveFilesUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesUpdate>>,
    TError,
    { fileId: string; data: NonReadonly<File>; params?: DriveFilesUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveFilesUpdate>>,
  TError,
  { fileId: string; data: NonReadonly<File>; params?: DriveFilesUpdateParams },
  TContext
> => {
  const mutationKey = ["driveFilesUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveFilesUpdate>>,
    { fileId: string; data: NonReadonly<File>; params?: DriveFilesUpdateParams }
  > = (props) => {
    const { fileId, data, params } = props ?? {};

    return driveFilesUpdate(fileId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveFilesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof driveFilesUpdate>>>;
export type DriveFilesUpdateMutationBody = NonReadonly<File>;
export type DriveFilesUpdateMutationError = unknown;

export const useDriveFilesUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesUpdate>>,
    TError,
    { fileId: string; data: NonReadonly<File>; params?: DriveFilesUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveFilesUpdate>>,
  TError,
  { fileId: string; data: NonReadonly<File>; params?: DriveFilesUpdateParams },
  TContext
> => {
  const mutationOptions = getDriveFilesUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists a file's comments.
 */
export const driveCommentsList = (
  fileId: string,
  params?: DriveCommentsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<CommentList>(
    { url: `https://www.googleapis.com/drive/v3/files/${fileId}/comments`, method: "GET", params, signal },
    options,
  );
};

export const getDriveCommentsListQueryKey = (fileId: string, params?: DriveCommentsListParams) => {
  return [`https://www.googleapis.com/drive/v3/files/${fileId}/comments`, ...(params ? [params] : [])] as const;
};

export const getDriveCommentsListQueryOptions = <
  TData = Awaited<ReturnType<typeof driveCommentsList>>,
  TError = unknown,
>(
  fileId: string,
  params?: DriveCommentsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveCommentsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveCommentsListQueryKey(fileId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveCommentsList>>> = ({ signal }) =>
    driveCommentsList(fileId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!fileId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveCommentsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveCommentsListQueryResult = NonNullable<Awaited<ReturnType<typeof driveCommentsList>>>;
export type DriveCommentsListQueryError = unknown;

export function useDriveCommentsList<TData = Awaited<ReturnType<typeof driveCommentsList>>, TError = unknown>(
  fileId: string,
  params: undefined | DriveCommentsListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveCommentsList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveCommentsList>>,
          TError,
          Awaited<ReturnType<typeof driveCommentsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveCommentsList<TData = Awaited<ReturnType<typeof driveCommentsList>>, TError = unknown>(
  fileId: string,
  params?: DriveCommentsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveCommentsList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveCommentsList>>,
          TError,
          Awaited<ReturnType<typeof driveCommentsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveCommentsList<TData = Awaited<ReturnType<typeof driveCommentsList>>, TError = unknown>(
  fileId: string,
  params?: DriveCommentsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveCommentsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveCommentsList<TData = Awaited<ReturnType<typeof driveCommentsList>>, TError = unknown>(
  fileId: string,
  params?: DriveCommentsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveCommentsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveCommentsListQueryOptions(fileId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveCommentsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveCommentsList>>,
  TError = unknown,
>(
  fileId: string,
  params?: DriveCommentsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveCommentsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveCommentsListQueryKey(fileId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveCommentsList>>> = ({ signal }) =>
    driveCommentsList(fileId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveCommentsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveCommentsListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveCommentsList>>>;
export type DriveCommentsListSuspenseQueryError = unknown;

export function useDriveCommentsListSuspense<TData = Awaited<ReturnType<typeof driveCommentsList>>, TError = unknown>(
  fileId: string,
  params: undefined | DriveCommentsListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveCommentsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveCommentsListSuspense<TData = Awaited<ReturnType<typeof driveCommentsList>>, TError = unknown>(
  fileId: string,
  params?: DriveCommentsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveCommentsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveCommentsListSuspense<TData = Awaited<ReturnType<typeof driveCommentsList>>, TError = unknown>(
  fileId: string,
  params?: DriveCommentsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveCommentsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveCommentsListSuspense<TData = Awaited<ReturnType<typeof driveCommentsList>>, TError = unknown>(
  fileId: string,
  params?: DriveCommentsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveCommentsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveCommentsListSuspenseQueryOptions(fileId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a comment on a file.
 */
export const driveCommentsCreate = (
  fileId: string,
  comment: Comment,
  params?: DriveCommentsCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Comment>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/comments`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: comment,
      params,
      signal,
    },
    options,
  );
};

export const getDriveCommentsCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveCommentsCreate>>,
    TError,
    { fileId: string; data: Comment; params?: DriveCommentsCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveCommentsCreate>>,
  TError,
  { fileId: string; data: Comment; params?: DriveCommentsCreateParams },
  TContext
> => {
  const mutationKey = ["driveCommentsCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveCommentsCreate>>,
    { fileId: string; data: Comment; params?: DriveCommentsCreateParams }
  > = (props) => {
    const { fileId, data, params } = props ?? {};

    return driveCommentsCreate(fileId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveCommentsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof driveCommentsCreate>>>;
export type DriveCommentsCreateMutationBody = Comment;
export type DriveCommentsCreateMutationError = unknown;

export const useDriveCommentsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveCommentsCreate>>,
    TError,
    { fileId: string; data: Comment; params?: DriveCommentsCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveCommentsCreate>>,
  TError,
  { fileId: string; data: Comment; params?: DriveCommentsCreateParams },
  TContext
> => {
  const mutationOptions = getDriveCommentsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Deletes a comment.
 */
export const driveCommentsDelete = (
  fileId: string,
  commentId: string,
  params?: DriveCommentsDeleteParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<void>(
    { url: `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}`, method: "DELETE", params },
    options,
  );
};

export const getDriveCommentsDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveCommentsDelete>>,
    TError,
    { fileId: string; commentId: string; params?: DriveCommentsDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveCommentsDelete>>,
  TError,
  { fileId: string; commentId: string; params?: DriveCommentsDeleteParams },
  TContext
> => {
  const mutationKey = ["driveCommentsDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveCommentsDelete>>,
    { fileId: string; commentId: string; params?: DriveCommentsDeleteParams }
  > = (props) => {
    const { fileId, commentId, params } = props ?? {};

    return driveCommentsDelete(fileId, commentId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveCommentsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof driveCommentsDelete>>>;

export type DriveCommentsDeleteMutationError = unknown;

export const useDriveCommentsDelete = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveCommentsDelete>>,
    TError,
    { fileId: string; commentId: string; params?: DriveCommentsDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveCommentsDelete>>,
  TError,
  { fileId: string; commentId: string; params?: DriveCommentsDeleteParams },
  TContext
> => {
  const mutationOptions = getDriveCommentsDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Gets a comment by ID.
 */
export const driveCommentsGet = (
  fileId: string,
  commentId: string,
  params?: DriveCommentsGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Comment>(
    { url: `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}`, method: "GET", params, signal },
    options,
  );
};

export const getDriveCommentsGetQueryKey = (fileId: string, commentId: string, params?: DriveCommentsGetParams) => {
  return [
    `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getDriveCommentsGetQueryOptions = <TData = Awaited<ReturnType<typeof driveCommentsGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveCommentsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveCommentsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveCommentsGetQueryKey(fileId, commentId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveCommentsGet>>> = ({ signal }) =>
    driveCommentsGet(fileId, commentId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(fileId && commentId), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveCommentsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveCommentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof driveCommentsGet>>>;
export type DriveCommentsGetQueryError = unknown;

export function useDriveCommentsGet<TData = Awaited<ReturnType<typeof driveCommentsGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params: undefined | DriveCommentsGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveCommentsGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveCommentsGet>>,
          TError,
          Awaited<ReturnType<typeof driveCommentsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveCommentsGet<TData = Awaited<ReturnType<typeof driveCommentsGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveCommentsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveCommentsGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveCommentsGet>>,
          TError,
          Awaited<ReturnType<typeof driveCommentsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveCommentsGet<TData = Awaited<ReturnType<typeof driveCommentsGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveCommentsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveCommentsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveCommentsGet<TData = Awaited<ReturnType<typeof driveCommentsGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveCommentsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveCommentsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveCommentsGetQueryOptions(fileId, commentId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveCommentsGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveCommentsGet>>,
  TError = unknown,
>(
  fileId: string,
  commentId: string,
  params?: DriveCommentsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveCommentsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveCommentsGetQueryKey(fileId, commentId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveCommentsGet>>> = ({ signal }) =>
    driveCommentsGet(fileId, commentId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveCommentsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveCommentsGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveCommentsGet>>>;
export type DriveCommentsGetSuspenseQueryError = unknown;

export function useDriveCommentsGetSuspense<TData = Awaited<ReturnType<typeof driveCommentsGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params: undefined | DriveCommentsGetParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveCommentsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveCommentsGetSuspense<TData = Awaited<ReturnType<typeof driveCommentsGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveCommentsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveCommentsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveCommentsGetSuspense<TData = Awaited<ReturnType<typeof driveCommentsGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveCommentsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveCommentsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveCommentsGetSuspense<TData = Awaited<ReturnType<typeof driveCommentsGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveCommentsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveCommentsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveCommentsGetSuspenseQueryOptions(fileId, commentId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a comment with patch semantics.
 */
export const driveCommentsUpdate = (
  fileId: string,
  commentId: string,
  comment: Comment,
  params?: DriveCommentsUpdateParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<Comment>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: comment,
      params,
    },
    options,
  );
};

export const getDriveCommentsUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveCommentsUpdate>>,
    TError,
    { fileId: string; commentId: string; data: Comment; params?: DriveCommentsUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveCommentsUpdate>>,
  TError,
  { fileId: string; commentId: string; data: Comment; params?: DriveCommentsUpdateParams },
  TContext
> => {
  const mutationKey = ["driveCommentsUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveCommentsUpdate>>,
    { fileId: string; commentId: string; data: Comment; params?: DriveCommentsUpdateParams }
  > = (props) => {
    const { fileId, commentId, data, params } = props ?? {};

    return driveCommentsUpdate(fileId, commentId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveCommentsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof driveCommentsUpdate>>>;
export type DriveCommentsUpdateMutationBody = Comment;
export type DriveCommentsUpdateMutationError = unknown;

export const useDriveCommentsUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveCommentsUpdate>>,
    TError,
    { fileId: string; commentId: string; data: Comment; params?: DriveCommentsUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveCommentsUpdate>>,
  TError,
  { fileId: string; commentId: string; data: Comment; params?: DriveCommentsUpdateParams },
  TContext
> => {
  const mutationOptions = getDriveCommentsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists a comment's replies.
 */
export const driveRepliesList = (
  fileId: string,
  commentId: string,
  params?: DriveRepliesListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<ReplyList>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}/replies`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getDriveRepliesListQueryKey = (fileId: string, commentId: string, params?: DriveRepliesListParams) => {
  return [
    `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}/replies`,
    ...(params ? [params] : []),
  ] as const;
};

export const getDriveRepliesListQueryOptions = <TData = Awaited<ReturnType<typeof driveRepliesList>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveRepliesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRepliesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveRepliesListQueryKey(fileId, commentId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveRepliesList>>> = ({ signal }) =>
    driveRepliesList(fileId, commentId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(fileId && commentId), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveRepliesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveRepliesListQueryResult = NonNullable<Awaited<ReturnType<typeof driveRepliesList>>>;
export type DriveRepliesListQueryError = unknown;

export function useDriveRepliesList<TData = Awaited<ReturnType<typeof driveRepliesList>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params: undefined | DriveRepliesListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRepliesList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveRepliesList>>,
          TError,
          Awaited<ReturnType<typeof driveRepliesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRepliesList<TData = Awaited<ReturnType<typeof driveRepliesList>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveRepliesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRepliesList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveRepliesList>>,
          TError,
          Awaited<ReturnType<typeof driveRepliesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRepliesList<TData = Awaited<ReturnType<typeof driveRepliesList>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveRepliesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRepliesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveRepliesList<TData = Awaited<ReturnType<typeof driveRepliesList>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveRepliesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRepliesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveRepliesListQueryOptions(fileId, commentId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveRepliesListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveRepliesList>>,
  TError = unknown,
>(
  fileId: string,
  commentId: string,
  params?: DriveRepliesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRepliesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveRepliesListQueryKey(fileId, commentId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveRepliesList>>> = ({ signal }) =>
    driveRepliesList(fileId, commentId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveRepliesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveRepliesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveRepliesList>>>;
export type DriveRepliesListSuspenseQueryError = unknown;

export function useDriveRepliesListSuspense<TData = Awaited<ReturnType<typeof driveRepliesList>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params: undefined | DriveRepliesListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRepliesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRepliesListSuspense<TData = Awaited<ReturnType<typeof driveRepliesList>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveRepliesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRepliesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRepliesListSuspense<TData = Awaited<ReturnType<typeof driveRepliesList>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveRepliesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRepliesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveRepliesListSuspense<TData = Awaited<ReturnType<typeof driveRepliesList>>, TError = unknown>(
  fileId: string,
  commentId: string,
  params?: DriveRepliesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRepliesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveRepliesListSuspenseQueryOptions(fileId, commentId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a reply to a comment.
 */
export const driveRepliesCreate = (
  fileId: string,
  commentId: string,
  reply: Reply,
  params?: DriveRepliesCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Reply>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}/replies`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: reply,
      params,
      signal,
    },
    options,
  );
};

export const getDriveRepliesCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveRepliesCreate>>,
    TError,
    { fileId: string; commentId: string; data: Reply; params?: DriveRepliesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveRepliesCreate>>,
  TError,
  { fileId: string; commentId: string; data: Reply; params?: DriveRepliesCreateParams },
  TContext
> => {
  const mutationKey = ["driveRepliesCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveRepliesCreate>>,
    { fileId: string; commentId: string; data: Reply; params?: DriveRepliesCreateParams }
  > = (props) => {
    const { fileId, commentId, data, params } = props ?? {};

    return driveRepliesCreate(fileId, commentId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveRepliesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof driveRepliesCreate>>>;
export type DriveRepliesCreateMutationBody = Reply;
export type DriveRepliesCreateMutationError = unknown;

export const useDriveRepliesCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveRepliesCreate>>,
    TError,
    { fileId: string; commentId: string; data: Reply; params?: DriveRepliesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveRepliesCreate>>,
  TError,
  { fileId: string; commentId: string; data: Reply; params?: DriveRepliesCreateParams },
  TContext
> => {
  const mutationOptions = getDriveRepliesCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Deletes a reply.
 */
export const driveRepliesDelete = (
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesDeleteParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<void>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}/replies/${replyId}`,
      method: "DELETE",
      params,
    },
    options,
  );
};

export const getDriveRepliesDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveRepliesDelete>>,
    TError,
    { fileId: string; commentId: string; replyId: string; params?: DriveRepliesDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveRepliesDelete>>,
  TError,
  { fileId: string; commentId: string; replyId: string; params?: DriveRepliesDeleteParams },
  TContext
> => {
  const mutationKey = ["driveRepliesDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveRepliesDelete>>,
    { fileId: string; commentId: string; replyId: string; params?: DriveRepliesDeleteParams }
  > = (props) => {
    const { fileId, commentId, replyId, params } = props ?? {};

    return driveRepliesDelete(fileId, commentId, replyId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveRepliesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof driveRepliesDelete>>>;

export type DriveRepliesDeleteMutationError = unknown;

export const useDriveRepliesDelete = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveRepliesDelete>>,
    TError,
    { fileId: string; commentId: string; replyId: string; params?: DriveRepliesDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveRepliesDelete>>,
  TError,
  { fileId: string; commentId: string; replyId: string; params?: DriveRepliesDeleteParams },
  TContext
> => {
  const mutationOptions = getDriveRepliesDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Gets a reply by ID.
 */
export const driveRepliesGet = (
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Reply>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}/replies/${replyId}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getDriveRepliesGetQueryKey = (
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesGetParams,
) => {
  return [
    `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}/replies/${replyId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getDriveRepliesGetQueryOptions = <TData = Awaited<ReturnType<typeof driveRepliesGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRepliesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveRepliesGetQueryKey(fileId, commentId, replyId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveRepliesGet>>> = ({ signal }) =>
    driveRepliesGet(fileId, commentId, replyId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(fileId && commentId && replyId), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveRepliesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveRepliesGetQueryResult = NonNullable<Awaited<ReturnType<typeof driveRepliesGet>>>;
export type DriveRepliesGetQueryError = unknown;

export function useDriveRepliesGet<TData = Awaited<ReturnType<typeof driveRepliesGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  replyId: string,
  params: undefined | DriveRepliesGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRepliesGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveRepliesGet>>,
          TError,
          Awaited<ReturnType<typeof driveRepliesGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRepliesGet<TData = Awaited<ReturnType<typeof driveRepliesGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRepliesGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveRepliesGet>>,
          TError,
          Awaited<ReturnType<typeof driveRepliesGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRepliesGet<TData = Awaited<ReturnType<typeof driveRepliesGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRepliesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveRepliesGet<TData = Awaited<ReturnType<typeof driveRepliesGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRepliesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveRepliesGetQueryOptions(fileId, commentId, replyId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveRepliesGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveRepliesGet>>,
  TError = unknown,
>(
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRepliesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveRepliesGetQueryKey(fileId, commentId, replyId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveRepliesGet>>> = ({ signal }) =>
    driveRepliesGet(fileId, commentId, replyId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveRepliesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveRepliesGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveRepliesGet>>>;
export type DriveRepliesGetSuspenseQueryError = unknown;

export function useDriveRepliesGetSuspense<TData = Awaited<ReturnType<typeof driveRepliesGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  replyId: string,
  params: undefined | DriveRepliesGetParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRepliesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRepliesGetSuspense<TData = Awaited<ReturnType<typeof driveRepliesGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRepliesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRepliesGetSuspense<TData = Awaited<ReturnType<typeof driveRepliesGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRepliesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveRepliesGetSuspense<TData = Awaited<ReturnType<typeof driveRepliesGet>>, TError = unknown>(
  fileId: string,
  commentId: string,
  replyId: string,
  params?: DriveRepliesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRepliesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveRepliesGetSuspenseQueryOptions(fileId, commentId, replyId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a reply with patch semantics.
 */
export const driveRepliesUpdate = (
  fileId: string,
  commentId: string,
  replyId: string,
  reply: Reply,
  params?: DriveRepliesUpdateParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<Reply>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/comments/${commentId}/replies/${replyId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: reply,
      params,
    },
    options,
  );
};

export const getDriveRepliesUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveRepliesUpdate>>,
    TError,
    { fileId: string; commentId: string; replyId: string; data: Reply; params?: DriveRepliesUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveRepliesUpdate>>,
  TError,
  { fileId: string; commentId: string; replyId: string; data: Reply; params?: DriveRepliesUpdateParams },
  TContext
> => {
  const mutationKey = ["driveRepliesUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveRepliesUpdate>>,
    { fileId: string; commentId: string; replyId: string; data: Reply; params?: DriveRepliesUpdateParams }
  > = (props) => {
    const { fileId, commentId, replyId, data, params } = props ?? {};

    return driveRepliesUpdate(fileId, commentId, replyId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveRepliesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof driveRepliesUpdate>>>;
export type DriveRepliesUpdateMutationBody = Reply;
export type DriveRepliesUpdateMutationError = unknown;

export const useDriveRepliesUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveRepliesUpdate>>,
    TError,
    { fileId: string; commentId: string; replyId: string; data: Reply; params?: DriveRepliesUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveRepliesUpdate>>,
  TError,
  { fileId: string; commentId: string; replyId: string; data: Reply; params?: DriveRepliesUpdateParams },
  TContext
> => {
  const mutationOptions = getDriveRepliesUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Creates a copy of a file and applies any requested updates with patch semantics.
 */
export const driveFilesCopy = (
  fileId: string,
  file: NonReadonly<File>,
  params?: DriveFilesCopyParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<File>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/copy`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: file,
      params,
      signal,
    },
    options,
  );
};

export const getDriveFilesCopyMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesCopy>>,
    TError,
    { fileId: string; data: NonReadonly<File>; params?: DriveFilesCopyParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveFilesCopy>>,
  TError,
  { fileId: string; data: NonReadonly<File>; params?: DriveFilesCopyParams },
  TContext
> => {
  const mutationKey = ["driveFilesCopy"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveFilesCopy>>,
    { fileId: string; data: NonReadonly<File>; params?: DriveFilesCopyParams }
  > = (props) => {
    const { fileId, data, params } = props ?? {};

    return driveFilesCopy(fileId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveFilesCopyMutationResult = NonNullable<Awaited<ReturnType<typeof driveFilesCopy>>>;
export type DriveFilesCopyMutationBody = NonReadonly<File>;
export type DriveFilesCopyMutationError = unknown;

export const useDriveFilesCopy = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesCopy>>,
    TError,
    { fileId: string; data: NonReadonly<File>; params?: DriveFilesCopyParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveFilesCopy>>,
  TError,
  { fileId: string; data: NonReadonly<File>; params?: DriveFilesCopyParams },
  TContext
> => {
  const mutationOptions = getDriveFilesCopyMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB.
 */
export const driveFilesExport = (
  fileId: string,
  params: DriveFilesExportParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<void>(
    { url: `https://www.googleapis.com/drive/v3/files/${fileId}/export`, method: "GET", params, signal },
    options,
  );
};

export const getDriveFilesExportQueryKey = (fileId: string, params: DriveFilesExportParams) => {
  return [`https://www.googleapis.com/drive/v3/files/${fileId}/export`, ...(params ? [params] : [])] as const;
};

export const getDriveFilesExportQueryOptions = <TData = Awaited<ReturnType<typeof driveFilesExport>>, TError = unknown>(
  fileId: string,
  params: DriveFilesExportParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesExport>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveFilesExportQueryKey(fileId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveFilesExport>>> = ({ signal }) =>
    driveFilesExport(fileId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!fileId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveFilesExport>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveFilesExportQueryResult = NonNullable<Awaited<ReturnType<typeof driveFilesExport>>>;
export type DriveFilesExportQueryError = unknown;

export function useDriveFilesExport<TData = Awaited<ReturnType<typeof driveFilesExport>>, TError = unknown>(
  fileId: string,
  params: DriveFilesExportParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesExport>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveFilesExport>>,
          TError,
          Awaited<ReturnType<typeof driveFilesExport>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesExport<TData = Awaited<ReturnType<typeof driveFilesExport>>, TError = unknown>(
  fileId: string,
  params: DriveFilesExportParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesExport>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveFilesExport>>,
          TError,
          Awaited<ReturnType<typeof driveFilesExport>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesExport<TData = Awaited<ReturnType<typeof driveFilesExport>>, TError = unknown>(
  fileId: string,
  params: DriveFilesExportParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesExport>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveFilesExport<TData = Awaited<ReturnType<typeof driveFilesExport>>, TError = unknown>(
  fileId: string,
  params: DriveFilesExportParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesExport>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveFilesExportQueryOptions(fileId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveFilesExportSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveFilesExport>>,
  TError = unknown,
>(
  fileId: string,
  params: DriveFilesExportParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesExport>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveFilesExportQueryKey(fileId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveFilesExport>>> = ({ signal }) =>
    driveFilesExport(fileId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveFilesExport>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveFilesExportSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveFilesExport>>>;
export type DriveFilesExportSuspenseQueryError = unknown;

export function useDriveFilesExportSuspense<TData = Awaited<ReturnType<typeof driveFilesExport>>, TError = unknown>(
  fileId: string,
  params: DriveFilesExportParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesExport>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesExportSuspense<TData = Awaited<ReturnType<typeof driveFilesExport>>, TError = unknown>(
  fileId: string,
  params: DriveFilesExportParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesExport>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesExportSuspense<TData = Awaited<ReturnType<typeof driveFilesExport>>, TError = unknown>(
  fileId: string,
  params: DriveFilesExportParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesExport>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveFilesExportSuspense<TData = Awaited<ReturnType<typeof driveFilesExport>>, TError = unknown>(
  fileId: string,
  params: DriveFilesExportParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesExport>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveFilesExportSuspenseQueryOptions(fileId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Lists the labels on a file.
 */
export const driveFilesListLabels = (
  fileId: string,
  params?: DriveFilesListLabelsParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<LabelList>(
    { url: `https://www.googleapis.com/drive/v3/files/${fileId}/listLabels`, method: "GET", params, signal },
    options,
  );
};

export const getDriveFilesListLabelsQueryKey = (fileId: string, params?: DriveFilesListLabelsParams) => {
  return [`https://www.googleapis.com/drive/v3/files/${fileId}/listLabels`, ...(params ? [params] : [])] as const;
};

export const getDriveFilesListLabelsQueryOptions = <
  TData = Awaited<ReturnType<typeof driveFilesListLabels>>,
  TError = unknown,
>(
  fileId: string,
  params?: DriveFilesListLabelsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesListLabels>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveFilesListLabelsQueryKey(fileId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveFilesListLabels>>> = ({ signal }) =>
    driveFilesListLabels(fileId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!fileId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveFilesListLabels>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveFilesListLabelsQueryResult = NonNullable<Awaited<ReturnType<typeof driveFilesListLabels>>>;
export type DriveFilesListLabelsQueryError = unknown;

export function useDriveFilesListLabels<TData = Awaited<ReturnType<typeof driveFilesListLabels>>, TError = unknown>(
  fileId: string,
  params: undefined | DriveFilesListLabelsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesListLabels>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveFilesListLabels>>,
          TError,
          Awaited<ReturnType<typeof driveFilesListLabels>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesListLabels<TData = Awaited<ReturnType<typeof driveFilesListLabels>>, TError = unknown>(
  fileId: string,
  params?: DriveFilesListLabelsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesListLabels>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveFilesListLabels>>,
          TError,
          Awaited<ReturnType<typeof driveFilesListLabels>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesListLabels<TData = Awaited<ReturnType<typeof driveFilesListLabels>>, TError = unknown>(
  fileId: string,
  params?: DriveFilesListLabelsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesListLabels>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveFilesListLabels<TData = Awaited<ReturnType<typeof driveFilesListLabels>>, TError = unknown>(
  fileId: string,
  params?: DriveFilesListLabelsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveFilesListLabels>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveFilesListLabelsQueryOptions(fileId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveFilesListLabelsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveFilesListLabels>>,
  TError = unknown,
>(
  fileId: string,
  params?: DriveFilesListLabelsParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesListLabels>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveFilesListLabelsQueryKey(fileId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveFilesListLabels>>> = ({ signal }) =>
    driveFilesListLabels(fileId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveFilesListLabels>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveFilesListLabelsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveFilesListLabels>>>;
export type DriveFilesListLabelsSuspenseQueryError = unknown;

export function useDriveFilesListLabelsSuspense<
  TData = Awaited<ReturnType<typeof driveFilesListLabels>>,
  TError = unknown,
>(
  fileId: string,
  params: undefined | DriveFilesListLabelsParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesListLabels>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesListLabelsSuspense<
  TData = Awaited<ReturnType<typeof driveFilesListLabels>>,
  TError = unknown,
>(
  fileId: string,
  params?: DriveFilesListLabelsParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesListLabels>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveFilesListLabelsSuspense<
  TData = Awaited<ReturnType<typeof driveFilesListLabels>>,
  TError = unknown,
>(
  fileId: string,
  params?: DriveFilesListLabelsParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesListLabels>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveFilesListLabelsSuspense<
  TData = Awaited<ReturnType<typeof driveFilesListLabels>>,
  TError = unknown,
>(
  fileId: string,
  params?: DriveFilesListLabelsParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveFilesListLabels>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveFilesListLabelsSuspenseQueryOptions(fileId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Modifies the set of labels applied to a file. Returns a list of the labels that were added or modified.
 */
export const driveFilesModifyLabels = (
  fileId: string,
  modifyLabelsRequest: ModifyLabelsRequest,
  params?: DriveFilesModifyLabelsParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<ModifyLabelsResponse>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/modifyLabels`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: modifyLabelsRequest,
      params,
      signal,
    },
    options,
  );
};

export const getDriveFilesModifyLabelsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesModifyLabels>>,
    TError,
    { fileId: string; data: ModifyLabelsRequest; params?: DriveFilesModifyLabelsParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveFilesModifyLabels>>,
  TError,
  { fileId: string; data: ModifyLabelsRequest; params?: DriveFilesModifyLabelsParams },
  TContext
> => {
  const mutationKey = ["driveFilesModifyLabels"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveFilesModifyLabels>>,
    { fileId: string; data: ModifyLabelsRequest; params?: DriveFilesModifyLabelsParams }
  > = (props) => {
    const { fileId, data, params } = props ?? {};

    return driveFilesModifyLabels(fileId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveFilesModifyLabelsMutationResult = NonNullable<Awaited<ReturnType<typeof driveFilesModifyLabels>>>;
export type DriveFilesModifyLabelsMutationBody = ModifyLabelsRequest;
export type DriveFilesModifyLabelsMutationError = unknown;

export const useDriveFilesModifyLabels = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesModifyLabels>>,
    TError,
    { fileId: string; data: ModifyLabelsRequest; params?: DriveFilesModifyLabelsParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveFilesModifyLabels>>,
  TError,
  { fileId: string; data: ModifyLabelsRequest; params?: DriveFilesModifyLabelsParams },
  TContext
> => {
  const mutationOptions = getDriveFilesModifyLabelsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists a file's or shared drive's permissions.
 */
export const drivePermissionsList = (
  fileId: string,
  params?: DrivePermissionsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<PermissionList>(
    { url: `https://www.googleapis.com/drive/v3/files/${fileId}/permissions`, method: "GET", params, signal },
    options,
  );
};

export const getDrivePermissionsListQueryKey = (fileId: string, params?: DrivePermissionsListParams) => {
  return [`https://www.googleapis.com/drive/v3/files/${fileId}/permissions`, ...(params ? [params] : [])] as const;
};

export const getDrivePermissionsListQueryOptions = <
  TData = Awaited<ReturnType<typeof drivePermissionsList>>,
  TError = unknown,
>(
  fileId: string,
  params?: DrivePermissionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof drivePermissionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDrivePermissionsListQueryKey(fileId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof drivePermissionsList>>> = ({ signal }) =>
    drivePermissionsList(fileId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!fileId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof drivePermissionsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DrivePermissionsListQueryResult = NonNullable<Awaited<ReturnType<typeof drivePermissionsList>>>;
export type DrivePermissionsListQueryError = unknown;

export function useDrivePermissionsList<TData = Awaited<ReturnType<typeof drivePermissionsList>>, TError = unknown>(
  fileId: string,
  params: undefined | DrivePermissionsListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof drivePermissionsList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof drivePermissionsList>>,
          TError,
          Awaited<ReturnType<typeof drivePermissionsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDrivePermissionsList<TData = Awaited<ReturnType<typeof drivePermissionsList>>, TError = unknown>(
  fileId: string,
  params?: DrivePermissionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof drivePermissionsList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof drivePermissionsList>>,
          TError,
          Awaited<ReturnType<typeof drivePermissionsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDrivePermissionsList<TData = Awaited<ReturnType<typeof drivePermissionsList>>, TError = unknown>(
  fileId: string,
  params?: DrivePermissionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof drivePermissionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDrivePermissionsList<TData = Awaited<ReturnType<typeof drivePermissionsList>>, TError = unknown>(
  fileId: string,
  params?: DrivePermissionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof drivePermissionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDrivePermissionsListQueryOptions(fileId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDrivePermissionsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof drivePermissionsList>>,
  TError = unknown,
>(
  fileId: string,
  params?: DrivePermissionsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof drivePermissionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDrivePermissionsListQueryKey(fileId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof drivePermissionsList>>> = ({ signal }) =>
    drivePermissionsList(fileId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof drivePermissionsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DrivePermissionsListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof drivePermissionsList>>>;
export type DrivePermissionsListSuspenseQueryError = unknown;

export function useDrivePermissionsListSuspense<
  TData = Awaited<ReturnType<typeof drivePermissionsList>>,
  TError = unknown,
>(
  fileId: string,
  params: undefined | DrivePermissionsListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof drivePermissionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDrivePermissionsListSuspense<
  TData = Awaited<ReturnType<typeof drivePermissionsList>>,
  TError = unknown,
>(
  fileId: string,
  params?: DrivePermissionsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof drivePermissionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDrivePermissionsListSuspense<
  TData = Awaited<ReturnType<typeof drivePermissionsList>>,
  TError = unknown,
>(
  fileId: string,
  params?: DrivePermissionsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof drivePermissionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDrivePermissionsListSuspense<
  TData = Awaited<ReturnType<typeof drivePermissionsList>>,
  TError = unknown,
>(
  fileId: string,
  params?: DrivePermissionsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof drivePermissionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDrivePermissionsListSuspenseQueryOptions(fileId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a permission for a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
 */
export const drivePermissionsCreate = (
  fileId: string,
  permission: NonReadonly<Permission>,
  params?: DrivePermissionsCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Permission>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/permissions`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: permission,
      params,
      signal,
    },
    options,
  );
};

export const getDrivePermissionsCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof drivePermissionsCreate>>,
    TError,
    { fileId: string; data: NonReadonly<Permission>; params?: DrivePermissionsCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof drivePermissionsCreate>>,
  TError,
  { fileId: string; data: NonReadonly<Permission>; params?: DrivePermissionsCreateParams },
  TContext
> => {
  const mutationKey = ["drivePermissionsCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof drivePermissionsCreate>>,
    { fileId: string; data: NonReadonly<Permission>; params?: DrivePermissionsCreateParams }
  > = (props) => {
    const { fileId, data, params } = props ?? {};

    return drivePermissionsCreate(fileId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DrivePermissionsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof drivePermissionsCreate>>>;
export type DrivePermissionsCreateMutationBody = NonReadonly<Permission>;
export type DrivePermissionsCreateMutationError = unknown;

export const useDrivePermissionsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof drivePermissionsCreate>>,
    TError,
    { fileId: string; data: NonReadonly<Permission>; params?: DrivePermissionsCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof drivePermissionsCreate>>,
  TError,
  { fileId: string; data: NonReadonly<Permission>; params?: DrivePermissionsCreateParams },
  TContext
> => {
  const mutationOptions = getDrivePermissionsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Deletes a permission. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
 */
export const drivePermissionsDelete = (
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsDeleteParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<void>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/permissions/${permissionId}`,
      method: "DELETE",
      params,
    },
    options,
  );
};

export const getDrivePermissionsDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof drivePermissionsDelete>>,
    TError,
    { fileId: string; permissionId: string; params?: DrivePermissionsDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof drivePermissionsDelete>>,
  TError,
  { fileId: string; permissionId: string; params?: DrivePermissionsDeleteParams },
  TContext
> => {
  const mutationKey = ["drivePermissionsDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof drivePermissionsDelete>>,
    { fileId: string; permissionId: string; params?: DrivePermissionsDeleteParams }
  > = (props) => {
    const { fileId, permissionId, params } = props ?? {};

    return drivePermissionsDelete(fileId, permissionId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DrivePermissionsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof drivePermissionsDelete>>>;

export type DrivePermissionsDeleteMutationError = unknown;

export const useDrivePermissionsDelete = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof drivePermissionsDelete>>,
    TError,
    { fileId: string; permissionId: string; params?: DrivePermissionsDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof drivePermissionsDelete>>,
  TError,
  { fileId: string; permissionId: string; params?: DrivePermissionsDeleteParams },
  TContext
> => {
  const mutationOptions = getDrivePermissionsDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Gets a permission by ID.
 */
export const drivePermissionsGet = (
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Permission>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/permissions/${permissionId}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getDrivePermissionsGetQueryKey = (
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsGetParams,
) => {
  return [
    `https://www.googleapis.com/drive/v3/files/${fileId}/permissions/${permissionId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getDrivePermissionsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof drivePermissionsGet>>,
  TError = unknown,
>(
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof drivePermissionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDrivePermissionsGetQueryKey(fileId, permissionId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof drivePermissionsGet>>> = ({ signal }) =>
    drivePermissionsGet(fileId, permissionId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(fileId && permissionId), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof drivePermissionsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DrivePermissionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof drivePermissionsGet>>>;
export type DrivePermissionsGetQueryError = unknown;

export function useDrivePermissionsGet<TData = Awaited<ReturnType<typeof drivePermissionsGet>>, TError = unknown>(
  fileId: string,
  permissionId: string,
  params: undefined | DrivePermissionsGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof drivePermissionsGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof drivePermissionsGet>>,
          TError,
          Awaited<ReturnType<typeof drivePermissionsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDrivePermissionsGet<TData = Awaited<ReturnType<typeof drivePermissionsGet>>, TError = unknown>(
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof drivePermissionsGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof drivePermissionsGet>>,
          TError,
          Awaited<ReturnType<typeof drivePermissionsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDrivePermissionsGet<TData = Awaited<ReturnType<typeof drivePermissionsGet>>, TError = unknown>(
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof drivePermissionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDrivePermissionsGet<TData = Awaited<ReturnType<typeof drivePermissionsGet>>, TError = unknown>(
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof drivePermissionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDrivePermissionsGetQueryOptions(fileId, permissionId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDrivePermissionsGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof drivePermissionsGet>>,
  TError = unknown,
>(
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof drivePermissionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDrivePermissionsGetQueryKey(fileId, permissionId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof drivePermissionsGet>>> = ({ signal }) =>
    drivePermissionsGet(fileId, permissionId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof drivePermissionsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DrivePermissionsGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof drivePermissionsGet>>>;
export type DrivePermissionsGetSuspenseQueryError = unknown;

export function useDrivePermissionsGetSuspense<
  TData = Awaited<ReturnType<typeof drivePermissionsGet>>,
  TError = unknown,
>(
  fileId: string,
  permissionId: string,
  params: undefined | DrivePermissionsGetParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof drivePermissionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDrivePermissionsGetSuspense<
  TData = Awaited<ReturnType<typeof drivePermissionsGet>>,
  TError = unknown,
>(
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof drivePermissionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDrivePermissionsGetSuspense<
  TData = Awaited<ReturnType<typeof drivePermissionsGet>>,
  TError = unknown,
>(
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof drivePermissionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDrivePermissionsGetSuspense<
  TData = Awaited<ReturnType<typeof drivePermissionsGet>>,
  TError = unknown,
>(
  fileId: string,
  permissionId: string,
  params?: DrivePermissionsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof drivePermissionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDrivePermissionsGetSuspenseQueryOptions(fileId, permissionId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a permission with patch semantics. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
 */
export const drivePermissionsUpdate = (
  fileId: string,
  permissionId: string,
  permission: NonReadonly<Permission>,
  params?: DrivePermissionsUpdateParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<Permission>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/permissions/${permissionId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: permission,
      params,
    },
    options,
  );
};

export const getDrivePermissionsUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof drivePermissionsUpdate>>,
    TError,
    { fileId: string; permissionId: string; data: NonReadonly<Permission>; params?: DrivePermissionsUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof drivePermissionsUpdate>>,
  TError,
  { fileId: string; permissionId: string; data: NonReadonly<Permission>; params?: DrivePermissionsUpdateParams },
  TContext
> => {
  const mutationKey = ["drivePermissionsUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof drivePermissionsUpdate>>,
    { fileId: string; permissionId: string; data: NonReadonly<Permission>; params?: DrivePermissionsUpdateParams }
  > = (props) => {
    const { fileId, permissionId, data, params } = props ?? {};

    return drivePermissionsUpdate(fileId, permissionId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DrivePermissionsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof drivePermissionsUpdate>>>;
export type DrivePermissionsUpdateMutationBody = NonReadonly<Permission>;
export type DrivePermissionsUpdateMutationError = unknown;

export const useDrivePermissionsUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof drivePermissionsUpdate>>,
    TError,
    { fileId: string; permissionId: string; data: NonReadonly<Permission>; params?: DrivePermissionsUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof drivePermissionsUpdate>>,
  TError,
  { fileId: string; permissionId: string; data: NonReadonly<Permission>; params?: DrivePermissionsUpdateParams },
  TContext
> => {
  const mutationOptions = getDrivePermissionsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists a file's revisions.
 */
export const driveRevisionsList = (
  fileId: string,
  params?: DriveRevisionsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<RevisionList>(
    { url: `https://www.googleapis.com/drive/v3/files/${fileId}/revisions`, method: "GET", params, signal },
    options,
  );
};

export const getDriveRevisionsListQueryKey = (fileId: string, params?: DriveRevisionsListParams) => {
  return [`https://www.googleapis.com/drive/v3/files/${fileId}/revisions`, ...(params ? [params] : [])] as const;
};

export const getDriveRevisionsListQueryOptions = <
  TData = Awaited<ReturnType<typeof driveRevisionsList>>,
  TError = unknown,
>(
  fileId: string,
  params?: DriveRevisionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRevisionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveRevisionsListQueryKey(fileId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveRevisionsList>>> = ({ signal }) =>
    driveRevisionsList(fileId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!fileId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveRevisionsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveRevisionsListQueryResult = NonNullable<Awaited<ReturnType<typeof driveRevisionsList>>>;
export type DriveRevisionsListQueryError = unknown;

export function useDriveRevisionsList<TData = Awaited<ReturnType<typeof driveRevisionsList>>, TError = unknown>(
  fileId: string,
  params: undefined | DriveRevisionsListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRevisionsList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveRevisionsList>>,
          TError,
          Awaited<ReturnType<typeof driveRevisionsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRevisionsList<TData = Awaited<ReturnType<typeof driveRevisionsList>>, TError = unknown>(
  fileId: string,
  params?: DriveRevisionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRevisionsList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveRevisionsList>>,
          TError,
          Awaited<ReturnType<typeof driveRevisionsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRevisionsList<TData = Awaited<ReturnType<typeof driveRevisionsList>>, TError = unknown>(
  fileId: string,
  params?: DriveRevisionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRevisionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveRevisionsList<TData = Awaited<ReturnType<typeof driveRevisionsList>>, TError = unknown>(
  fileId: string,
  params?: DriveRevisionsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRevisionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveRevisionsListQueryOptions(fileId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveRevisionsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveRevisionsList>>,
  TError = unknown,
>(
  fileId: string,
  params?: DriveRevisionsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRevisionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveRevisionsListQueryKey(fileId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveRevisionsList>>> = ({ signal }) =>
    driveRevisionsList(fileId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveRevisionsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveRevisionsListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveRevisionsList>>>;
export type DriveRevisionsListSuspenseQueryError = unknown;

export function useDriveRevisionsListSuspense<TData = Awaited<ReturnType<typeof driveRevisionsList>>, TError = unknown>(
  fileId: string,
  params: undefined | DriveRevisionsListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRevisionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRevisionsListSuspense<TData = Awaited<ReturnType<typeof driveRevisionsList>>, TError = unknown>(
  fileId: string,
  params?: DriveRevisionsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRevisionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRevisionsListSuspense<TData = Awaited<ReturnType<typeof driveRevisionsList>>, TError = unknown>(
  fileId: string,
  params?: DriveRevisionsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRevisionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveRevisionsListSuspense<TData = Awaited<ReturnType<typeof driveRevisionsList>>, TError = unknown>(
  fileId: string,
  params?: DriveRevisionsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRevisionsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveRevisionsListSuspenseQueryOptions(fileId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Permanently deletes a file version. You can only delete revisions for files with binary content in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can't be deleted.
 */
export const driveRevisionsDelete = (
  fileId: string,
  revisionId: string,
  params?: DriveRevisionsDeleteParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<void>(
    { url: `https://www.googleapis.com/drive/v3/files/${fileId}/revisions/${revisionId}`, method: "DELETE", params },
    options,
  );
};

export const getDriveRevisionsDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveRevisionsDelete>>,
    TError,
    { fileId: string; revisionId: string; params?: DriveRevisionsDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveRevisionsDelete>>,
  TError,
  { fileId: string; revisionId: string; params?: DriveRevisionsDeleteParams },
  TContext
> => {
  const mutationKey = ["driveRevisionsDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveRevisionsDelete>>,
    { fileId: string; revisionId: string; params?: DriveRevisionsDeleteParams }
  > = (props) => {
    const { fileId, revisionId, params } = props ?? {};

    return driveRevisionsDelete(fileId, revisionId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveRevisionsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof driveRevisionsDelete>>>;

export type DriveRevisionsDeleteMutationError = unknown;

export const useDriveRevisionsDelete = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveRevisionsDelete>>,
    TError,
    { fileId: string; revisionId: string; params?: DriveRevisionsDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveRevisionsDelete>>,
  TError,
  { fileId: string; revisionId: string; params?: DriveRevisionsDeleteParams },
  TContext
> => {
  const mutationOptions = getDriveRevisionsDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Gets a revision's metadata or content by ID.
 */
export const driveRevisionsGet = (
  fileId: string,
  revisionId: string,
  params?: DriveRevisionsGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Revision>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/revisions/${revisionId}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getDriveRevisionsGetQueryKey = (fileId: string, revisionId: string, params?: DriveRevisionsGetParams) => {
  return [
    `https://www.googleapis.com/drive/v3/files/${fileId}/revisions/${revisionId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getDriveRevisionsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof driveRevisionsGet>>,
  TError = unknown,
>(
  fileId: string,
  revisionId: string,
  params?: DriveRevisionsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRevisionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveRevisionsGetQueryKey(fileId, revisionId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveRevisionsGet>>> = ({ signal }) =>
    driveRevisionsGet(fileId, revisionId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(fileId && revisionId), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveRevisionsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveRevisionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof driveRevisionsGet>>>;
export type DriveRevisionsGetQueryError = unknown;

export function useDriveRevisionsGet<TData = Awaited<ReturnType<typeof driveRevisionsGet>>, TError = unknown>(
  fileId: string,
  revisionId: string,
  params: undefined | DriveRevisionsGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRevisionsGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveRevisionsGet>>,
          TError,
          Awaited<ReturnType<typeof driveRevisionsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRevisionsGet<TData = Awaited<ReturnType<typeof driveRevisionsGet>>, TError = unknown>(
  fileId: string,
  revisionId: string,
  params?: DriveRevisionsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRevisionsGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveRevisionsGet>>,
          TError,
          Awaited<ReturnType<typeof driveRevisionsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRevisionsGet<TData = Awaited<ReturnType<typeof driveRevisionsGet>>, TError = unknown>(
  fileId: string,
  revisionId: string,
  params?: DriveRevisionsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRevisionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveRevisionsGet<TData = Awaited<ReturnType<typeof driveRevisionsGet>>, TError = unknown>(
  fileId: string,
  revisionId: string,
  params?: DriveRevisionsGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveRevisionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveRevisionsGetQueryOptions(fileId, revisionId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveRevisionsGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveRevisionsGet>>,
  TError = unknown,
>(
  fileId: string,
  revisionId: string,
  params?: DriveRevisionsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRevisionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveRevisionsGetQueryKey(fileId, revisionId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveRevisionsGet>>> = ({ signal }) =>
    driveRevisionsGet(fileId, revisionId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveRevisionsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveRevisionsGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveRevisionsGet>>>;
export type DriveRevisionsGetSuspenseQueryError = unknown;

export function useDriveRevisionsGetSuspense<TData = Awaited<ReturnType<typeof driveRevisionsGet>>, TError = unknown>(
  fileId: string,
  revisionId: string,
  params: undefined | DriveRevisionsGetParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRevisionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRevisionsGetSuspense<TData = Awaited<ReturnType<typeof driveRevisionsGet>>, TError = unknown>(
  fileId: string,
  revisionId: string,
  params?: DriveRevisionsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRevisionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveRevisionsGetSuspense<TData = Awaited<ReturnType<typeof driveRevisionsGet>>, TError = unknown>(
  fileId: string,
  revisionId: string,
  params?: DriveRevisionsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRevisionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveRevisionsGetSuspense<TData = Awaited<ReturnType<typeof driveRevisionsGet>>, TError = unknown>(
  fileId: string,
  revisionId: string,
  params?: DriveRevisionsGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveRevisionsGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveRevisionsGetSuspenseQueryOptions(fileId, revisionId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a revision with patch semantics.
 */
export const driveRevisionsUpdate = (
  fileId: string,
  revisionId: string,
  revision: Revision,
  params?: DriveRevisionsUpdateParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<Revision>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/revisions/${revisionId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: revision,
      params,
    },
    options,
  );
};

export const getDriveRevisionsUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveRevisionsUpdate>>,
    TError,
    { fileId: string; revisionId: string; data: Revision; params?: DriveRevisionsUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveRevisionsUpdate>>,
  TError,
  { fileId: string; revisionId: string; data: Revision; params?: DriveRevisionsUpdateParams },
  TContext
> => {
  const mutationKey = ["driveRevisionsUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveRevisionsUpdate>>,
    { fileId: string; revisionId: string; data: Revision; params?: DriveRevisionsUpdateParams }
  > = (props) => {
    const { fileId, revisionId, data, params } = props ?? {};

    return driveRevisionsUpdate(fileId, revisionId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveRevisionsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof driveRevisionsUpdate>>>;
export type DriveRevisionsUpdateMutationBody = Revision;
export type DriveRevisionsUpdateMutationError = unknown;

export const useDriveRevisionsUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveRevisionsUpdate>>,
    TError,
    { fileId: string; revisionId: string; data: Revision; params?: DriveRevisionsUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveRevisionsUpdate>>,
  TError,
  { fileId: string; revisionId: string; data: Revision; params?: DriveRevisionsUpdateParams },
  TContext
> => {
  const mutationOptions = getDriveRevisionsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Subscribes to changes to a file.
 */
export const driveFilesWatch = (
  fileId: string,
  channel: Channel,
  params?: DriveFilesWatchParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Channel>(
    {
      url: `https://www.googleapis.com/drive/v3/files/${fileId}/watch`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: channel,
      params,
      signal,
    },
    options,
  );
};

export const getDriveFilesWatchMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesWatch>>,
    TError,
    { fileId: string; data: Channel; params?: DriveFilesWatchParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveFilesWatch>>,
  TError,
  { fileId: string; data: Channel; params?: DriveFilesWatchParams },
  TContext
> => {
  const mutationKey = ["driveFilesWatch"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveFilesWatch>>,
    { fileId: string; data: Channel; params?: DriveFilesWatchParams }
  > = (props) => {
    const { fileId, data, params } = props ?? {};

    return driveFilesWatch(fileId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveFilesWatchMutationResult = NonNullable<Awaited<ReturnType<typeof driveFilesWatch>>>;
export type DriveFilesWatchMutationBody = Channel;
export type DriveFilesWatchMutationError = unknown;

export const useDriveFilesWatch = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveFilesWatch>>,
    TError,
    { fileId: string; data: Channel; params?: DriveFilesWatchParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveFilesWatch>>,
  TError,
  { fileId: string; data: Channel; params?: DriveFilesWatchParams },
  TContext
> => {
  const mutationOptions = getDriveFilesWatchMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Deprecated: Use `drives.list` instead.
 */
export const driveTeamdrivesList = (
  params?: DriveTeamdrivesListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<TeamDriveList>(
    { url: `https://www.googleapis.com/drive/v3/teamdrives`, method: "GET", params, signal },
    options,
  );
};

export const getDriveTeamdrivesListQueryKey = (params?: DriveTeamdrivesListParams) => {
  return [`https://www.googleapis.com/drive/v3/teamdrives`, ...(params ? [params] : [])] as const;
};

export const getDriveTeamdrivesListQueryOptions = <
  TData = Awaited<ReturnType<typeof driveTeamdrivesList>>,
  TError = unknown,
>(
  params?: DriveTeamdrivesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveTeamdrivesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveTeamdrivesList>>> = ({ signal }) =>
    driveTeamdrivesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveTeamdrivesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveTeamdrivesListQueryResult = NonNullable<Awaited<ReturnType<typeof driveTeamdrivesList>>>;
export type DriveTeamdrivesListQueryError = unknown;

export function useDriveTeamdrivesList<TData = Awaited<ReturnType<typeof driveTeamdrivesList>>, TError = unknown>(
  params: undefined | DriveTeamdrivesListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveTeamdrivesList>>,
          TError,
          Awaited<ReturnType<typeof driveTeamdrivesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveTeamdrivesList<TData = Awaited<ReturnType<typeof driveTeamdrivesList>>, TError = unknown>(
  params?: DriveTeamdrivesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveTeamdrivesList>>,
          TError,
          Awaited<ReturnType<typeof driveTeamdrivesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveTeamdrivesList<TData = Awaited<ReturnType<typeof driveTeamdrivesList>>, TError = unknown>(
  params?: DriveTeamdrivesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveTeamdrivesList<TData = Awaited<ReturnType<typeof driveTeamdrivesList>>, TError = unknown>(
  params?: DriveTeamdrivesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveTeamdrivesListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveTeamdrivesListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveTeamdrivesList>>,
  TError = unknown,
>(
  params?: DriveTeamdrivesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveTeamdrivesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveTeamdrivesList>>> = ({ signal }) =>
    driveTeamdrivesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveTeamdrivesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveTeamdrivesListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveTeamdrivesList>>>;
export type DriveTeamdrivesListSuspenseQueryError = unknown;

export function useDriveTeamdrivesListSuspense<
  TData = Awaited<ReturnType<typeof driveTeamdrivesList>>,
  TError = unknown,
>(
  params: undefined | DriveTeamdrivesListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveTeamdrivesListSuspense<
  TData = Awaited<ReturnType<typeof driveTeamdrivesList>>,
  TError = unknown,
>(
  params?: DriveTeamdrivesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveTeamdrivesListSuspense<
  TData = Awaited<ReturnType<typeof driveTeamdrivesList>>,
  TError = unknown,
>(
  params?: DriveTeamdrivesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveTeamdrivesListSuspense<
  TData = Awaited<ReturnType<typeof driveTeamdrivesList>>,
  TError = unknown,
>(
  params?: DriveTeamdrivesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveTeamdrivesListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Deprecated: Use `drives.create` instead.
 */
export const driveTeamdrivesCreate = (
  teamDrive: TeamDrive,
  params: DriveTeamdrivesCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<TeamDrive>(
    {
      url: `https://www.googleapis.com/drive/v3/teamdrives`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: teamDrive,
      params,
      signal,
    },
    options,
  );
};

export const getDriveTeamdrivesCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveTeamdrivesCreate>>,
    TError,
    { data: TeamDrive; params: DriveTeamdrivesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveTeamdrivesCreate>>,
  TError,
  { data: TeamDrive; params: DriveTeamdrivesCreateParams },
  TContext
> => {
  const mutationKey = ["driveTeamdrivesCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveTeamdrivesCreate>>,
    { data: TeamDrive; params: DriveTeamdrivesCreateParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return driveTeamdrivesCreate(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveTeamdrivesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof driveTeamdrivesCreate>>>;
export type DriveTeamdrivesCreateMutationBody = TeamDrive;
export type DriveTeamdrivesCreateMutationError = unknown;

export const useDriveTeamdrivesCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveTeamdrivesCreate>>,
    TError,
    { data: TeamDrive; params: DriveTeamdrivesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveTeamdrivesCreate>>,
  TError,
  { data: TeamDrive; params: DriveTeamdrivesCreateParams },
  TContext
> => {
  const mutationOptions = getDriveTeamdrivesCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Deprecated: Use `drives.delete` instead.
 */
export const driveTeamdrivesDelete = (
  teamDriveId: string,
  params?: DriveTeamdrivesDeleteParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<void>(
    { url: `https://www.googleapis.com/drive/v3/teamdrives/${teamDriveId}`, method: "DELETE", params },
    options,
  );
};

export const getDriveTeamdrivesDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveTeamdrivesDelete>>,
    TError,
    { teamDriveId: string; params?: DriveTeamdrivesDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveTeamdrivesDelete>>,
  TError,
  { teamDriveId: string; params?: DriveTeamdrivesDeleteParams },
  TContext
> => {
  const mutationKey = ["driveTeamdrivesDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveTeamdrivesDelete>>,
    { teamDriveId: string; params?: DriveTeamdrivesDeleteParams }
  > = (props) => {
    const { teamDriveId, params } = props ?? {};

    return driveTeamdrivesDelete(teamDriveId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveTeamdrivesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof driveTeamdrivesDelete>>>;

export type DriveTeamdrivesDeleteMutationError = unknown;

export const useDriveTeamdrivesDelete = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveTeamdrivesDelete>>,
    TError,
    { teamDriveId: string; params?: DriveTeamdrivesDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveTeamdrivesDelete>>,
  TError,
  { teamDriveId: string; params?: DriveTeamdrivesDeleteParams },
  TContext
> => {
  const mutationOptions = getDriveTeamdrivesDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Deprecated: Use `drives.get` instead.
 */
export const driveTeamdrivesGet = (
  teamDriveId: string,
  params?: DriveTeamdrivesGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<TeamDrive>(
    { url: `https://www.googleapis.com/drive/v3/teamdrives/${teamDriveId}`, method: "GET", params, signal },
    options,
  );
};

export const getDriveTeamdrivesGetQueryKey = (teamDriveId: string, params?: DriveTeamdrivesGetParams) => {
  return [`https://www.googleapis.com/drive/v3/teamdrives/${teamDriveId}`, ...(params ? [params] : [])] as const;
};

export const getDriveTeamdrivesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof driveTeamdrivesGet>>,
  TError = unknown,
>(
  teamDriveId: string,
  params?: DriveTeamdrivesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveTeamdrivesGetQueryKey(teamDriveId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveTeamdrivesGet>>> = ({ signal }) =>
    driveTeamdrivesGet(teamDriveId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!teamDriveId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof driveTeamdrivesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveTeamdrivesGetQueryResult = NonNullable<Awaited<ReturnType<typeof driveTeamdrivesGet>>>;
export type DriveTeamdrivesGetQueryError = unknown;

export function useDriveTeamdrivesGet<TData = Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError = unknown>(
  teamDriveId: string,
  params: undefined | DriveTeamdrivesGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveTeamdrivesGet>>,
          TError,
          Awaited<ReturnType<typeof driveTeamdrivesGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveTeamdrivesGet<TData = Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError = unknown>(
  teamDriveId: string,
  params?: DriveTeamdrivesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof driveTeamdrivesGet>>,
          TError,
          Awaited<ReturnType<typeof driveTeamdrivesGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveTeamdrivesGet<TData = Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError = unknown>(
  teamDriveId: string,
  params?: DriveTeamdrivesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveTeamdrivesGet<TData = Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError = unknown>(
  teamDriveId: string,
  params?: DriveTeamdrivesGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveTeamdrivesGetQueryOptions(teamDriveId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDriveTeamdrivesGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof driveTeamdrivesGet>>,
  TError = unknown,
>(
  teamDriveId: string,
  params?: DriveTeamdrivesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDriveTeamdrivesGetQueryKey(teamDriveId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof driveTeamdrivesGet>>> = ({ signal }) =>
    driveTeamdrivesGet(teamDriveId, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof driveTeamdrivesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DriveTeamdrivesGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof driveTeamdrivesGet>>>;
export type DriveTeamdrivesGetSuspenseQueryError = unknown;

export function useDriveTeamdrivesGetSuspense<TData = Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError = unknown>(
  teamDriveId: string,
  params: undefined | DriveTeamdrivesGetParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveTeamdrivesGetSuspense<TData = Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError = unknown>(
  teamDriveId: string,
  params?: DriveTeamdrivesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useDriveTeamdrivesGetSuspense<TData = Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError = unknown>(
  teamDriveId: string,
  params?: DriveTeamdrivesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useDriveTeamdrivesGetSuspense<TData = Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError = unknown>(
  teamDriveId: string,
  params?: DriveTeamdrivesGetParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof driveTeamdrivesGet>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDriveTeamdrivesGetSuspenseQueryOptions(teamDriveId, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Deprecated: Use `drives.update` instead.
 */
export const driveTeamdrivesUpdate = (
  teamDriveId: string,
  teamDrive: TeamDrive,
  params?: DriveTeamdrivesUpdateParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<TeamDrive>(
    {
      url: `https://www.googleapis.com/drive/v3/teamdrives/${teamDriveId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: teamDrive,
      params,
    },
    options,
  );
};

export const getDriveTeamdrivesUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveTeamdrivesUpdate>>,
    TError,
    { teamDriveId: string; data: TeamDrive; params?: DriveTeamdrivesUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof driveTeamdrivesUpdate>>,
  TError,
  { teamDriveId: string; data: TeamDrive; params?: DriveTeamdrivesUpdateParams },
  TContext
> => {
  const mutationKey = ["driveTeamdrivesUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof driveTeamdrivesUpdate>>,
    { teamDriveId: string; data: TeamDrive; params?: DriveTeamdrivesUpdateParams }
  > = (props) => {
    const { teamDriveId, data, params } = props ?? {};

    return driveTeamdrivesUpdate(teamDriveId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DriveTeamdrivesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof driveTeamdrivesUpdate>>>;
export type DriveTeamdrivesUpdateMutationBody = TeamDrive;
export type DriveTeamdrivesUpdateMutationError = unknown;

export const useDriveTeamdrivesUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof driveTeamdrivesUpdate>>,
    TError,
    { teamDriveId: string; data: TeamDrive; params?: DriveTeamdrivesUpdateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof driveTeamdrivesUpdate>>,
  TError,
  { teamDriveId: string; data: TeamDrive; params?: DriveTeamdrivesUpdateParams },
  TContext
> => {
  const mutationOptions = getDriveTeamdrivesUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
