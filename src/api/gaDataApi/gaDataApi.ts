/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Google Analytics Data API
 * Accesses report data in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 * OpenAPI spec version: v1beta
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";

import type {
  AnalyticsdataPropertiesAudienceExportsCreateParams,
  AnalyticsdataPropertiesAudienceExportsGetParams,
  AnalyticsdataPropertiesAudienceExportsListParams,
  AnalyticsdataPropertiesAudienceExportsQueryParams,
  AnalyticsdataPropertiesBatchRunPivotReportsParams,
  AnalyticsdataPropertiesBatchRunReportsParams,
  AnalyticsdataPropertiesCheckCompatibilityParams,
  AnalyticsdataPropertiesRunPivotReportParams,
  AnalyticsdataPropertiesRunRealtimeReportParams,
  AnalyticsdataPropertiesRunReportParams,
  AudienceExport,
  BatchRunPivotReportsRequest,
  BatchRunPivotReportsResponse,
  BatchRunReportsRequest,
  BatchRunReportsResponse,
  CheckCompatibilityRequest,
  CheckCompatibilityResponse,
  ListAudienceExportsResponse,
  Operation,
  QueryAudienceExportRequest,
  QueryAudienceExportResponse,
  RunPivotReportRequest,
  RunPivotReportResponse,
  RunRealtimeReportRequest,
  RunRealtimeReportResponse,
  RunReportRequest,
  RunReportResponse,
} from "./gaDataApi.schemas";

import { fetchClient } from "../fetchClient";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Gets configuration metadata about a specific audience export. This method can be used to understand an audience export after it has been created. See [Creating an Audience Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics) for an introduction to Audience Exports with examples. Audience Export APIs have some methods at alpha and other methods at beta stability. The intention is to advance methods to beta stability after some feedback and adoption. To give your feedback on this API, complete the [Google Analytics Audience Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
 */
export const analyticsdataPropertiesAudienceExportsGet = (
  name: string,
  params?: AnalyticsdataPropertiesAudienceExportsGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<AudienceExport>(
    { url: `https://analyticsdata.googleapis.com/v1beta/${name}`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsdataPropertiesAudienceExportsGetQueryKey = (
  name: string,
  params?: AnalyticsdataPropertiesAudienceExportsGetParams,
) => {
  return [`https://analyticsdata.googleapis.com/v1beta/${name}`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsdataPropertiesAudienceExportsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsdataPropertiesAudienceExportsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsdataPropertiesAudienceExportsGetQueryKey(name, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>> = ({ signal }) =>
    analyticsdataPropertiesAudienceExportsGet(name, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!name, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsdataPropertiesAudienceExportsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>
>;
export type AnalyticsdataPropertiesAudienceExportsGetQueryError = unknown;

export function useAnalyticsdataPropertiesAudienceExportsGet<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
  TError = unknown,
>(
  name: string,
  params: undefined | AnalyticsdataPropertiesAudienceExportsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
          TError,
          Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsdataPropertiesAudienceExportsGet<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsdataPropertiesAudienceExportsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
          TError,
          Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsdataPropertiesAudienceExportsGet<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsdataPropertiesAudienceExportsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsdataPropertiesAudienceExportsGet<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsdataPropertiesAudienceExportsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsdataPropertiesAudienceExportsGetQueryOptions(name, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsdataPropertiesAudienceExportsGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsdataPropertiesAudienceExportsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsdataPropertiesAudienceExportsGetQueryKey(name, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>> = ({ signal }) =>
    analyticsdataPropertiesAudienceExportsGet(name, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsdataPropertiesAudienceExportsGetSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>
>;
export type AnalyticsdataPropertiesAudienceExportsGetSuspenseQueryError = unknown;

export function useAnalyticsdataPropertiesAudienceExportsGetSuspense<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
  TError = unknown,
>(
  name: string,
  params: undefined | AnalyticsdataPropertiesAudienceExportsGetParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsdataPropertiesAudienceExportsGetSuspense<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsdataPropertiesAudienceExportsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsdataPropertiesAudienceExportsGetSuspense<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsdataPropertiesAudienceExportsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsdataPropertiesAudienceExportsGetSuspense<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsdataPropertiesAudienceExportsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsdataPropertiesAudienceExportsGetSuspenseQueryOptions(name, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves an audience export of users. After creating an audience, the users are not immediately available for exporting. First, a request to `CreateAudienceExport` is necessary to create an audience export of users, and then second, this method is used to retrieve the users in the audience export. See [Creating an Audience Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics) for an introduction to Audience Exports with examples. Audiences in Google Analytics 4 allow you to segment your users in the ways that are important to your business. To learn more, see https://support.google.com/analytics/answer/9267572. Audience Export APIs have some methods at alpha and other methods at beta stability. The intention is to advance methods to beta stability after some feedback and adoption. To give your feedback on this API, complete the [Google Analytics Audience Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
 */
export const analyticsdataPropertiesAudienceExportsQuery = (
  name: string,
  queryAudienceExportRequest: QueryAudienceExportRequest,
  params?: AnalyticsdataPropertiesAudienceExportsQueryParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<QueryAudienceExportResponse>(
    {
      url: `https://analyticsdata.googleapis.com/v1beta/${name}:query`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: queryAudienceExportRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsdataPropertiesAudienceExportsQueryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsQuery>>,
    TError,
    { name: string; data: QueryAudienceExportRequest; params?: AnalyticsdataPropertiesAudienceExportsQueryParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsQuery>>,
  TError,
  { name: string; data: QueryAudienceExportRequest; params?: AnalyticsdataPropertiesAudienceExportsQueryParams },
  TContext
> => {
  const mutationKey = ["analyticsdataPropertiesAudienceExportsQuery"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsQuery>>,
    { name: string; data: QueryAudienceExportRequest; params?: AnalyticsdataPropertiesAudienceExportsQueryParams }
  > = (props) => {
    const { name, data, params } = props ?? {};

    return analyticsdataPropertiesAudienceExportsQuery(name, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsdataPropertiesAudienceExportsQueryMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsQuery>>
>;
export type AnalyticsdataPropertiesAudienceExportsQueryMutationBody = QueryAudienceExportRequest;
export type AnalyticsdataPropertiesAudienceExportsQueryMutationError = unknown;

export const useAnalyticsdataPropertiesAudienceExportsQuery = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsQuery>>,
    TError,
    { name: string; data: QueryAudienceExportRequest; params?: AnalyticsdataPropertiesAudienceExportsQueryParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsQuery>>,
  TError,
  { name: string; data: QueryAudienceExportRequest; params?: AnalyticsdataPropertiesAudienceExportsQueryParams },
  TContext
> => {
  const mutationOptions = getAnalyticsdataPropertiesAudienceExportsQueryMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists all audience exports for a property. This method can be used for you to find and reuse existing audience exports rather than creating unnecessary new audience exports. The same audience can have multiple audience exports that represent the export of users that were in an audience on different days. See [Creating an Audience Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics) for an introduction to Audience Exports with examples. Audience Export APIs have some methods at alpha and other methods at beta stability. The intention is to advance methods to beta stability after some feedback and adoption. To give your feedback on this API, complete the [Google Analytics Audience Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
 */
export const analyticsdataPropertiesAudienceExportsList = (
  parent: string,
  params?: AnalyticsdataPropertiesAudienceExportsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<ListAudienceExportsResponse>(
    { url: `https://analyticsdata.googleapis.com/v1beta/${parent}/audienceExports`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsdataPropertiesAudienceExportsListQueryKey = (
  parent: string,
  params?: AnalyticsdataPropertiesAudienceExportsListParams,
) => {
  return [
    `https://analyticsdata.googleapis.com/v1beta/${parent}/audienceExports`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAnalyticsdataPropertiesAudienceExportsListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsdataPropertiesAudienceExportsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsdataPropertiesAudienceExportsListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>> = ({ signal }) =>
    analyticsdataPropertiesAudienceExportsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!parent, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsdataPropertiesAudienceExportsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>
>;
export type AnalyticsdataPropertiesAudienceExportsListQueryError = unknown;

export function useAnalyticsdataPropertiesAudienceExportsList<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsdataPropertiesAudienceExportsListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsdataPropertiesAudienceExportsList<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsdataPropertiesAudienceExportsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsdataPropertiesAudienceExportsList<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsdataPropertiesAudienceExportsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsdataPropertiesAudienceExportsList<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsdataPropertiesAudienceExportsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsdataPropertiesAudienceExportsListQueryOptions(parent, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsdataPropertiesAudienceExportsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsdataPropertiesAudienceExportsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsdataPropertiesAudienceExportsListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>> = ({ signal }) =>
    analyticsdataPropertiesAudienceExportsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsdataPropertiesAudienceExportsListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>
>;
export type AnalyticsdataPropertiesAudienceExportsListSuspenseQueryError = unknown;

export function useAnalyticsdataPropertiesAudienceExportsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsdataPropertiesAudienceExportsListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsdataPropertiesAudienceExportsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsdataPropertiesAudienceExportsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsdataPropertiesAudienceExportsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsdataPropertiesAudienceExportsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsdataPropertiesAudienceExportsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsdataPropertiesAudienceExportsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsdataPropertiesAudienceExportsListSuspenseQueryOptions(parent, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates an audience export for later retrieval. This method quickly returns the audience export's resource name and initiates a long running asynchronous request to form an audience export. To export the users in an audience export, first create the audience export through this method and then send the audience resource name to the `QueryAudienceExport` method. See [Creating an Audience Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics) for an introduction to Audience Exports with examples. An audience export is a snapshot of the users currently in the audience at the time of audience export creation. Creating audience exports for one audience on different days will return different results as users enter and exit the audience. Audiences in Google Analytics 4 allow you to segment your users in the ways that are important to your business. To learn more, see https://support.google.com/analytics/answer/9267572. Audience exports contain the users in each audience. Audience Export APIs have some methods at alpha and other methods at beta stability. The intention is to advance methods to beta stability after some feedback and adoption. To give your feedback on this API, complete the [Google Analytics Audience Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
 */
export const analyticsdataPropertiesAudienceExportsCreate = (
  parent: string,
  audienceExport: NonReadonly<AudienceExport>,
  params?: AnalyticsdataPropertiesAudienceExportsCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<Operation>(
    {
      url: `https://analyticsdata.googleapis.com/v1beta/${parent}/audienceExports`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: audienceExport,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsdataPropertiesAudienceExportsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsCreate>>,
    TError,
    { parent: string; data: NonReadonly<AudienceExport>; params?: AnalyticsdataPropertiesAudienceExportsCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsCreate>>,
  TError,
  { parent: string; data: NonReadonly<AudienceExport>; params?: AnalyticsdataPropertiesAudienceExportsCreateParams },
  TContext
> => {
  const mutationKey = ["analyticsdataPropertiesAudienceExportsCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsCreate>>,
    { parent: string; data: NonReadonly<AudienceExport>; params?: AnalyticsdataPropertiesAudienceExportsCreateParams }
  > = (props) => {
    const { parent, data, params } = props ?? {};

    return analyticsdataPropertiesAudienceExportsCreate(parent, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsdataPropertiesAudienceExportsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsCreate>>
>;
export type AnalyticsdataPropertiesAudienceExportsCreateMutationBody = NonReadonly<AudienceExport>;
export type AnalyticsdataPropertiesAudienceExportsCreateMutationError = unknown;

export const useAnalyticsdataPropertiesAudienceExportsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsCreate>>,
    TError,
    { parent: string; data: NonReadonly<AudienceExport>; params?: AnalyticsdataPropertiesAudienceExportsCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsdataPropertiesAudienceExportsCreate>>,
  TError,
  { parent: string; data: NonReadonly<AudienceExport>; params?: AnalyticsdataPropertiesAudienceExportsCreateParams },
  TContext
> => {
  const mutationOptions = getAnalyticsdataPropertiesAudienceExportsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns multiple pivot reports in a batch. All reports must be for the same GA4 Property.
 */
export const analyticsdataPropertiesBatchRunPivotReports = (
  property: string,
  batchRunPivotReportsRequest: BatchRunPivotReportsRequest,
  params?: AnalyticsdataPropertiesBatchRunPivotReportsParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<BatchRunPivotReportsResponse>(
    {
      url: `https://analyticsdata.googleapis.com/v1beta/${property}:batchRunPivotReports`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: batchRunPivotReportsRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsdataPropertiesBatchRunPivotReportsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunPivotReports>>,
    TError,
    { property: string; data: BatchRunPivotReportsRequest; params?: AnalyticsdataPropertiesBatchRunPivotReportsParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunPivotReports>>,
  TError,
  { property: string; data: BatchRunPivotReportsRequest; params?: AnalyticsdataPropertiesBatchRunPivotReportsParams },
  TContext
> => {
  const mutationKey = ["analyticsdataPropertiesBatchRunPivotReports"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunPivotReports>>,
    { property: string; data: BatchRunPivotReportsRequest; params?: AnalyticsdataPropertiesBatchRunPivotReportsParams }
  > = (props) => {
    const { property, data, params } = props ?? {};

    return analyticsdataPropertiesBatchRunPivotReports(property, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsdataPropertiesBatchRunPivotReportsMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunPivotReports>>
>;
export type AnalyticsdataPropertiesBatchRunPivotReportsMutationBody = BatchRunPivotReportsRequest;
export type AnalyticsdataPropertiesBatchRunPivotReportsMutationError = unknown;

export const useAnalyticsdataPropertiesBatchRunPivotReports = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunPivotReports>>,
    TError,
    { property: string; data: BatchRunPivotReportsRequest; params?: AnalyticsdataPropertiesBatchRunPivotReportsParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunPivotReports>>,
  TError,
  { property: string; data: BatchRunPivotReportsRequest; params?: AnalyticsdataPropertiesBatchRunPivotReportsParams },
  TContext
> => {
  const mutationOptions = getAnalyticsdataPropertiesBatchRunPivotReportsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns multiple reports in a batch. All reports must be for the same GA4 Property.
 */
export const analyticsdataPropertiesBatchRunReports = (
  property: string,
  batchRunReportsRequest: BatchRunReportsRequest,
  params?: AnalyticsdataPropertiesBatchRunReportsParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<BatchRunReportsResponse>(
    {
      url: `https://analyticsdata.googleapis.com/v1beta/${property}:batchRunReports`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: batchRunReportsRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsdataPropertiesBatchRunReportsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunReports>>,
    TError,
    { property: string; data: BatchRunReportsRequest; params?: AnalyticsdataPropertiesBatchRunReportsParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunReports>>,
  TError,
  { property: string; data: BatchRunReportsRequest; params?: AnalyticsdataPropertiesBatchRunReportsParams },
  TContext
> => {
  const mutationKey = ["analyticsdataPropertiesBatchRunReports"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunReports>>,
    { property: string; data: BatchRunReportsRequest; params?: AnalyticsdataPropertiesBatchRunReportsParams }
  > = (props) => {
    const { property, data, params } = props ?? {};

    return analyticsdataPropertiesBatchRunReports(property, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsdataPropertiesBatchRunReportsMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunReports>>
>;
export type AnalyticsdataPropertiesBatchRunReportsMutationBody = BatchRunReportsRequest;
export type AnalyticsdataPropertiesBatchRunReportsMutationError = unknown;

export const useAnalyticsdataPropertiesBatchRunReports = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunReports>>,
    TError,
    { property: string; data: BatchRunReportsRequest; params?: AnalyticsdataPropertiesBatchRunReportsParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsdataPropertiesBatchRunReports>>,
  TError,
  { property: string; data: BatchRunReportsRequest; params?: AnalyticsdataPropertiesBatchRunReportsParams },
  TContext
> => {
  const mutationOptions = getAnalyticsdataPropertiesBatchRunReportsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * This compatibility method lists dimensions and metrics that can be added to a report request and maintain compatibility. This method fails if the request's dimensions and metrics are incompatible. In Google Analytics, reports fail if they request incompatible dimensions and/or metrics; in that case, you will need to remove dimensions and/or metrics from the incompatible report until the report is compatible. The Realtime and Core reports have different compatibility rules. This method checks compatibility for Core reports.
 */
export const analyticsdataPropertiesCheckCompatibility = (
  property: string,
  checkCompatibilityRequest: CheckCompatibilityRequest,
  params?: AnalyticsdataPropertiesCheckCompatibilityParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<CheckCompatibilityResponse>(
    {
      url: `https://analyticsdata.googleapis.com/v1beta/${property}:checkCompatibility`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: checkCompatibilityRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsdataPropertiesCheckCompatibilityMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesCheckCompatibility>>,
    TError,
    { property: string; data: CheckCompatibilityRequest; params?: AnalyticsdataPropertiesCheckCompatibilityParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsdataPropertiesCheckCompatibility>>,
  TError,
  { property: string; data: CheckCompatibilityRequest; params?: AnalyticsdataPropertiesCheckCompatibilityParams },
  TContext
> => {
  const mutationKey = ["analyticsdataPropertiesCheckCompatibility"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsdataPropertiesCheckCompatibility>>,
    { property: string; data: CheckCompatibilityRequest; params?: AnalyticsdataPropertiesCheckCompatibilityParams }
  > = (props) => {
    const { property, data, params } = props ?? {};

    return analyticsdataPropertiesCheckCompatibility(property, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsdataPropertiesCheckCompatibilityMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesCheckCompatibility>>
>;
export type AnalyticsdataPropertiesCheckCompatibilityMutationBody = CheckCompatibilityRequest;
export type AnalyticsdataPropertiesCheckCompatibilityMutationError = unknown;

export const useAnalyticsdataPropertiesCheckCompatibility = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesCheckCompatibility>>,
    TError,
    { property: string; data: CheckCompatibilityRequest; params?: AnalyticsdataPropertiesCheckCompatibilityParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsdataPropertiesCheckCompatibility>>,
  TError,
  { property: string; data: CheckCompatibilityRequest; params?: AnalyticsdataPropertiesCheckCompatibilityParams },
  TContext
> => {
  const mutationOptions = getAnalyticsdataPropertiesCheckCompatibilityMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns a customized pivot report of your Google Analytics event data. Pivot reports are more advanced and expressive formats than regular reports. In a pivot report, dimensions are only visible if they are included in a pivot. Multiple pivots can be specified to further dissect your data.
 */
export const analyticsdataPropertiesRunPivotReport = (
  property: string,
  runPivotReportRequest: RunPivotReportRequest,
  params?: AnalyticsdataPropertiesRunPivotReportParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<RunPivotReportResponse>(
    {
      url: `https://analyticsdata.googleapis.com/v1beta/${property}:runPivotReport`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: runPivotReportRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsdataPropertiesRunPivotReportMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesRunPivotReport>>,
    TError,
    { property: string; data: RunPivotReportRequest; params?: AnalyticsdataPropertiesRunPivotReportParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsdataPropertiesRunPivotReport>>,
  TError,
  { property: string; data: RunPivotReportRequest; params?: AnalyticsdataPropertiesRunPivotReportParams },
  TContext
> => {
  const mutationKey = ["analyticsdataPropertiesRunPivotReport"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsdataPropertiesRunPivotReport>>,
    { property: string; data: RunPivotReportRequest; params?: AnalyticsdataPropertiesRunPivotReportParams }
  > = (props) => {
    const { property, data, params } = props ?? {};

    return analyticsdataPropertiesRunPivotReport(property, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsdataPropertiesRunPivotReportMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesRunPivotReport>>
>;
export type AnalyticsdataPropertiesRunPivotReportMutationBody = RunPivotReportRequest;
export type AnalyticsdataPropertiesRunPivotReportMutationError = unknown;

export const useAnalyticsdataPropertiesRunPivotReport = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesRunPivotReport>>,
    TError,
    { property: string; data: RunPivotReportRequest; params?: AnalyticsdataPropertiesRunPivotReportParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsdataPropertiesRunPivotReport>>,
  TError,
  { property: string; data: RunPivotReportRequest; params?: AnalyticsdataPropertiesRunPivotReportParams },
  TContext
> => {
  const mutationOptions = getAnalyticsdataPropertiesRunPivotReportMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns a customized report of realtime event data for your property. Events appear in realtime reports seconds after they have been sent to the Google Analytics. Realtime reports show events and usage data for the periods of time ranging from the present moment to 30 minutes ago (up to 60 minutes for Google Analytics 360 properties). For a guide to constructing realtime requests & understanding responses, see [Creating a Realtime Report](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-basics).
 */
export const analyticsdataPropertiesRunRealtimeReport = (
  property: string,
  runRealtimeReportRequest: RunRealtimeReportRequest,
  params?: AnalyticsdataPropertiesRunRealtimeReportParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<RunRealtimeReportResponse>(
    {
      url: `https://analyticsdata.googleapis.com/v1beta/${property}:runRealtimeReport`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: runRealtimeReportRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsdataPropertiesRunRealtimeReportMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesRunRealtimeReport>>,
    TError,
    { property: string; data: RunRealtimeReportRequest; params?: AnalyticsdataPropertiesRunRealtimeReportParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsdataPropertiesRunRealtimeReport>>,
  TError,
  { property: string; data: RunRealtimeReportRequest; params?: AnalyticsdataPropertiesRunRealtimeReportParams },
  TContext
> => {
  const mutationKey = ["analyticsdataPropertiesRunRealtimeReport"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsdataPropertiesRunRealtimeReport>>,
    { property: string; data: RunRealtimeReportRequest; params?: AnalyticsdataPropertiesRunRealtimeReportParams }
  > = (props) => {
    const { property, data, params } = props ?? {};

    return analyticsdataPropertiesRunRealtimeReport(property, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsdataPropertiesRunRealtimeReportMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesRunRealtimeReport>>
>;
export type AnalyticsdataPropertiesRunRealtimeReportMutationBody = RunRealtimeReportRequest;
export type AnalyticsdataPropertiesRunRealtimeReportMutationError = unknown;

export const useAnalyticsdataPropertiesRunRealtimeReport = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesRunRealtimeReport>>,
    TError,
    { property: string; data: RunRealtimeReportRequest; params?: AnalyticsdataPropertiesRunRealtimeReportParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsdataPropertiesRunRealtimeReport>>,
  TError,
  { property: string; data: RunRealtimeReportRequest; params?: AnalyticsdataPropertiesRunRealtimeReportParams },
  TContext
> => {
  const mutationOptions = getAnalyticsdataPropertiesRunRealtimeReportMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns a customized report of your Google Analytics event data. Reports contain statistics derived from data collected by the Google Analytics tracking code. The data returned from the API is as a table with columns for the requested dimensions and metrics. Metrics are individual measurements of user activity on your property, such as active users or event count. Dimensions break down metrics across some common criteria, such as country or event name. For a guide to constructing requests & understanding responses, see [Creating a Report](https://developers.google.com/analytics/devguides/reporting/data/v1/basics).
 */
export const analyticsdataPropertiesRunReport = (
  property: string,
  runReportRequest: RunReportRequest,
  params?: AnalyticsdataPropertiesRunReportParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<RunReportResponse>(
    {
      url: `https://analyticsdata.googleapis.com/v1beta/${property}:runReport`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: runReportRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsdataPropertiesRunReportMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesRunReport>>,
    TError,
    { property: string; data: RunReportRequest; params?: AnalyticsdataPropertiesRunReportParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsdataPropertiesRunReport>>,
  TError,
  { property: string; data: RunReportRequest; params?: AnalyticsdataPropertiesRunReportParams },
  TContext
> => {
  const mutationKey = ["analyticsdataPropertiesRunReport"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsdataPropertiesRunReport>>,
    { property: string; data: RunReportRequest; params?: AnalyticsdataPropertiesRunReportParams }
  > = (props) => {
    const { property, data, params } = props ?? {};

    return analyticsdataPropertiesRunReport(property, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsdataPropertiesRunReportMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsdataPropertiesRunReport>>
>;
export type AnalyticsdataPropertiesRunReportMutationBody = RunReportRequest;
export type AnalyticsdataPropertiesRunReportMutationError = unknown;

export const useAnalyticsdataPropertiesRunReport = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsdataPropertiesRunReport>>,
    TError,
    { property: string; data: RunReportRequest; params?: AnalyticsdataPropertiesRunReportParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsdataPropertiesRunReport>>,
  TError,
  { property: string; data: RunReportRequest; params?: AnalyticsdataPropertiesRunReportParams },
  TContext
> => {
  const mutationOptions = getAnalyticsdataPropertiesRunReportMutationOptions(options);

  return useMutation(mutationOptions);
};
