/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 * OpenAPI spec version: v1beta
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";

import type {
  AnalyticsadminAccountSummariesListParams,
  AnalyticsadminAccountsListParams,
  AnalyticsadminAccountsProvisionAccountTicketParams,
  AnalyticsadminAccountsSearchChangeHistoryEventsParams,
  AnalyticsadminPropertiesAcknowledgeUserDataCollectionParams,
  AnalyticsadminPropertiesConversionEventsCreateParams,
  AnalyticsadminPropertiesConversionEventsListParams,
  AnalyticsadminPropertiesCreateParams,
  AnalyticsadminPropertiesCustomDimensionsCreateParams,
  AnalyticsadminPropertiesCustomDimensionsListParams,
  AnalyticsadminPropertiesCustomMetricsArchiveParams,
  AnalyticsadminPropertiesCustomMetricsCreateParams,
  AnalyticsadminPropertiesCustomMetricsListParams,
  AnalyticsadminPropertiesDataStreamsCreateParams,
  AnalyticsadminPropertiesDataStreamsListParams,
  AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateParams,
  AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  AnalyticsadminPropertiesFirebaseLinksCreateParams,
  AnalyticsadminPropertiesFirebaseLinksListParams,
  AnalyticsadminPropertiesGoogleAdsLinksCreateParams,
  AnalyticsadminPropertiesGoogleAdsLinksDeleteParams,
  AnalyticsadminPropertiesGoogleAdsLinksListParams,
  AnalyticsadminPropertiesGoogleAdsLinksPatchParams,
  AnalyticsadminPropertiesListParams,
  AnalyticsadminPropertiesRunAccessReportParams,
  GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest,
  GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionResponse,
  GoogleAnalyticsAdminV1betaArchiveCustomMetricRequest,
  GoogleAnalyticsAdminV1betaConversionEvent,
  GoogleAnalyticsAdminV1betaCustomDimension,
  GoogleAnalyticsAdminV1betaCustomMetric,
  GoogleAnalyticsAdminV1betaDataStream,
  GoogleAnalyticsAdminV1betaFirebaseLink,
  GoogleAnalyticsAdminV1betaGoogleAdsLink,
  GoogleAnalyticsAdminV1betaListAccountSummariesResponse,
  GoogleAnalyticsAdminV1betaListAccountsResponse,
  GoogleAnalyticsAdminV1betaListConversionEventsResponse,
  GoogleAnalyticsAdminV1betaListCustomDimensionsResponse,
  GoogleAnalyticsAdminV1betaListCustomMetricsResponse,
  GoogleAnalyticsAdminV1betaListDataStreamsResponse,
  GoogleAnalyticsAdminV1betaListFirebaseLinksResponse,
  GoogleAnalyticsAdminV1betaListGoogleAdsLinksResponse,
  GoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse,
  GoogleAnalyticsAdminV1betaListPropertiesResponse,
  GoogleAnalyticsAdminV1betaMeasurementProtocolSecret,
  GoogleAnalyticsAdminV1betaProperty,
  GoogleAnalyticsAdminV1betaProvisionAccountTicketRequest,
  GoogleAnalyticsAdminV1betaProvisionAccountTicketResponse,
  GoogleAnalyticsAdminV1betaRunAccessReportRequest,
  GoogleAnalyticsAdminV1betaRunAccessReportResponse,
  GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest,
  GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse,
  GoogleProtobufEmpty,
} from "./gaAdminApi.schemas";

import { fetchClient } from "../fetchClient";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Returns summaries of all accounts accessible by the caller.
 */
export const analyticsadminAccountSummariesList = (
  params?: AnalyticsadminAccountSummariesListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaListAccountSummariesResponse>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/accountSummaries`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsadminAccountSummariesListQueryKey = (params?: AnalyticsadminAccountSummariesListParams) => {
  return [`https://analyticsadmin.googleapis.com/v1beta/accountSummaries`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsadminAccountSummariesListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountSummariesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminAccountSummariesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>> = ({ signal }) =>
    analyticsadminAccountSummariesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminAccountSummariesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>
>;
export type AnalyticsadminAccountSummariesListQueryError = unknown;

export function useAnalyticsadminAccountSummariesList<
  TData = Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
  TError = unknown,
>(
  params: undefined | AnalyticsadminAccountSummariesListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminAccountSummariesList<
  TData = Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountSummariesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminAccountSummariesList<
  TData = Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountSummariesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminAccountSummariesList<
  TData = Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountSummariesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminAccountSummariesListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminAccountSummariesListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountSummariesListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminAccountSummariesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>> = ({ signal }) =>
    analyticsadminAccountSummariesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminAccountSummariesListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>
>;
export type AnalyticsadminAccountSummariesListSuspenseQueryError = unknown;

export function useAnalyticsadminAccountSummariesListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
  TError = unknown,
>(
  params: undefined | AnalyticsadminAccountSummariesListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminAccountSummariesListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountSummariesListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminAccountSummariesListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountSummariesListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminAccountSummariesListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountSummariesListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountSummariesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminAccountSummariesListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns all accounts accessible by the caller. Note that these accounts might not currently have GA4 properties. Soft-deleted (ie: "trashed") accounts are excluded by default. Returns an empty list if no relevant accounts are found.
 */
export const analyticsadminAccountsList = (
  params?: AnalyticsadminAccountsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaListAccountsResponse>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/accounts`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsadminAccountsListQueryKey = (params?: AnalyticsadminAccountsListParams) => {
  return [`https://analyticsadmin.googleapis.com/v1beta/accounts`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsadminAccountsListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminAccountsList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminAccountsListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminAccountsList>>> = ({ signal }) =>
    analyticsadminAccountsList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminAccountsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminAccountsListQueryResult = NonNullable<Awaited<ReturnType<typeof analyticsadminAccountsList>>>;
export type AnalyticsadminAccountsListQueryError = unknown;

export function useAnalyticsadminAccountsList<
  TData = Awaited<ReturnType<typeof analyticsadminAccountsList>>,
  TError = unknown,
>(
  params: undefined | AnalyticsadminAccountsListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountsList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminAccountsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminAccountsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminAccountsList<
  TData = Awaited<ReturnType<typeof analyticsadminAccountsList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountsList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminAccountsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminAccountsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminAccountsList<
  TData = Awaited<ReturnType<typeof analyticsadminAccountsList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminAccountsList<
  TData = Awaited<ReturnType<typeof analyticsadminAccountsList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountsListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminAccountsListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminAccountsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminAccountsList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminAccountsListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminAccountsList>>> = ({ signal }) =>
    analyticsadminAccountsList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminAccountsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminAccountsListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminAccountsList>>
>;
export type AnalyticsadminAccountsListSuspenseQueryError = unknown;

export function useAnalyticsadminAccountsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminAccountsList>>,
  TError = unknown,
>(
  params: undefined | AnalyticsadminAccountsListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminAccountsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminAccountsList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminAccountsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminAccountsList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminAccountsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminAccountsList>>,
  TError = unknown,
>(
  params?: AnalyticsadminAccountsListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminAccountsList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminAccountsListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Requests a ticket for creating an account.
 */
export const analyticsadminAccountsProvisionAccountTicket = (
  googleAnalyticsAdminV1betaProvisionAccountTicketRequest: GoogleAnalyticsAdminV1betaProvisionAccountTicketRequest,
  params?: AnalyticsadminAccountsProvisionAccountTicketParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaProvisionAccountTicketResponse>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/accounts:provisionAccountTicket`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaProvisionAccountTicketRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminAccountsProvisionAccountTicketMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminAccountsProvisionAccountTicket>>,
    TError,
    {
      data: GoogleAnalyticsAdminV1betaProvisionAccountTicketRequest;
      params?: AnalyticsadminAccountsProvisionAccountTicketParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminAccountsProvisionAccountTicket>>,
  TError,
  {
    data: GoogleAnalyticsAdminV1betaProvisionAccountTicketRequest;
    params?: AnalyticsadminAccountsProvisionAccountTicketParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminAccountsProvisionAccountTicket"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminAccountsProvisionAccountTicket>>,
    {
      data: GoogleAnalyticsAdminV1betaProvisionAccountTicketRequest;
      params?: AnalyticsadminAccountsProvisionAccountTicketParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return analyticsadminAccountsProvisionAccountTicket(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminAccountsProvisionAccountTicketMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminAccountsProvisionAccountTicket>>
>;
export type AnalyticsadminAccountsProvisionAccountTicketMutationBody =
  GoogleAnalyticsAdminV1betaProvisionAccountTicketRequest;
export type AnalyticsadminAccountsProvisionAccountTicketMutationError = unknown;

export const useAnalyticsadminAccountsProvisionAccountTicket = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminAccountsProvisionAccountTicket>>,
    TError,
    {
      data: GoogleAnalyticsAdminV1betaProvisionAccountTicketRequest;
      params?: AnalyticsadminAccountsProvisionAccountTicketParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminAccountsProvisionAccountTicket>>,
  TError,
  {
    data: GoogleAnalyticsAdminV1betaProvisionAccountTicketRequest;
    params?: AnalyticsadminAccountsProvisionAccountTicketParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminAccountsProvisionAccountTicketMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns child Properties under the specified parent Account. Only "GA4" properties will be returned. Properties will be excluded if the caller does not have access. Soft-deleted (ie: "trashed") properties are excluded by default. Returns an empty list if no relevant properties are found.
 */
export const analyticsadminPropertiesList = (
  params?: AnalyticsadminPropertiesListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaListPropertiesResponse>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/properties`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsadminPropertiesListQueryKey = (params?: AnalyticsadminPropertiesListParams) => {
  return [`https://analyticsadmin.googleapis.com/v1beta/properties`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsadminPropertiesListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminPropertiesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesList>>> = ({ signal }) =>
    analyticsadminPropertiesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesList>>
>;
export type AnalyticsadminPropertiesListQueryError = unknown;

export function useAnalyticsadminPropertiesList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
  TError = unknown,
>(
  params: undefined | AnalyticsadminPropertiesListParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesList>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminPropertiesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesList>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminPropertiesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminPropertiesListParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminPropertiesListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminPropertiesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesList>>> = ({ signal }) =>
    analyticsadminPropertiesList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesList>>
>;
export type AnalyticsadminPropertiesListSuspenseQueryError = unknown;

export function useAnalyticsadminPropertiesListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
  TError = unknown,
>(
  params: undefined | AnalyticsadminPropertiesListParams,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminPropertiesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminPropertiesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesList>>,
  TError = unknown,
>(
  params?: AnalyticsadminPropertiesListParams,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesList>>, TError, TData>>;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates an "GA4" property with the specified location and attributes.
 */
export const analyticsadminPropertiesCreate = (
  googleAnalyticsAdminV1betaProperty: NonReadonly<GoogleAnalyticsAdminV1betaProperty>,
  params?: AnalyticsadminPropertiesCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaProperty>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/properties`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaProperty,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCreate>>,
    TError,
    { data: NonReadonly<GoogleAnalyticsAdminV1betaProperty>; params?: AnalyticsadminPropertiesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesCreate>>,
  TError,
  { data: NonReadonly<GoogleAnalyticsAdminV1betaProperty>; params?: AnalyticsadminPropertiesCreateParams },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesCreate>>,
    { data: NonReadonly<GoogleAnalyticsAdminV1betaProperty>; params?: AnalyticsadminPropertiesCreateParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return analyticsadminPropertiesCreate(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesCreate>>
>;
export type AnalyticsadminPropertiesCreateMutationBody = NonReadonly<GoogleAnalyticsAdminV1betaProperty>;
export type AnalyticsadminPropertiesCreateMutationError = unknown;

export const useAnalyticsadminPropertiesCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCreate>>,
    TError,
    { data: NonReadonly<GoogleAnalyticsAdminV1betaProperty>; params?: AnalyticsadminPropertiesCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesCreate>>,
  TError,
  { data: NonReadonly<GoogleAnalyticsAdminV1betaProperty>; params?: AnalyticsadminPropertiesCreateParams },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Searches through all changes to an account or its children given the specified set of filters.
 */
export const analyticsadminAccountsSearchChangeHistoryEvents = (
  account: string,
  googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest: GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest,
  params?: AnalyticsadminAccountsSearchChangeHistoryEventsParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${account}:searchChangeHistoryEvents`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminAccountsSearchChangeHistoryEventsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminAccountsSearchChangeHistoryEvents>>,
    TError,
    {
      account: string;
      data: GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest;
      params?: AnalyticsadminAccountsSearchChangeHistoryEventsParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminAccountsSearchChangeHistoryEvents>>,
  TError,
  {
    account: string;
    data: GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest;
    params?: AnalyticsadminAccountsSearchChangeHistoryEventsParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminAccountsSearchChangeHistoryEvents"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminAccountsSearchChangeHistoryEvents>>,
    {
      account: string;
      data: GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest;
      params?: AnalyticsadminAccountsSearchChangeHistoryEventsParams;
    }
  > = (props) => {
    const { account, data, params } = props ?? {};

    return analyticsadminAccountsSearchChangeHistoryEvents(account, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminAccountsSearchChangeHistoryEventsMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminAccountsSearchChangeHistoryEvents>>
>;
export type AnalyticsadminAccountsSearchChangeHistoryEventsMutationBody =
  GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest;
export type AnalyticsadminAccountsSearchChangeHistoryEventsMutationError = unknown;

export const useAnalyticsadminAccountsSearchChangeHistoryEvents = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminAccountsSearchChangeHistoryEvents>>,
    TError,
    {
      account: string;
      data: GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest;
      params?: AnalyticsadminAccountsSearchChangeHistoryEventsParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminAccountsSearchChangeHistoryEvents>>,
  TError,
  {
    account: string;
    data: GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest;
    params?: AnalyticsadminAccountsSearchChangeHistoryEventsParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminAccountsSearchChangeHistoryEventsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns a customized report of data access records. The report provides records of each time a user reads Google Analytics reporting data. Access records are retained for up to 2 years. Data Access Reports can be requested for a property. Reports may be requested for any property, but dimensions that aren't related to quota can only be requested on Google Analytics 360 properties. This method is only available to Administrators. These data access records include GA4 UI Reporting, GA4 UI Explorations, GA4 Data API, and other products like Firebase & Admob that can retrieve data from Google Analytics through a linkage. These records don't include property configuration changes like adding a stream or changing a property's time zone. For configuration change history, see [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
 */
export const analyticsadminPropertiesRunAccessReport = (
  entity: string,
  googleAnalyticsAdminV1betaRunAccessReportRequest: GoogleAnalyticsAdminV1betaRunAccessReportRequest,
  params?: AnalyticsadminPropertiesRunAccessReportParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaRunAccessReportResponse>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${entity}:runAccessReport`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaRunAccessReportRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesRunAccessReportMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesRunAccessReport>>,
    TError,
    {
      entity: string;
      data: GoogleAnalyticsAdminV1betaRunAccessReportRequest;
      params?: AnalyticsadminPropertiesRunAccessReportParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesRunAccessReport>>,
  TError,
  {
    entity: string;
    data: GoogleAnalyticsAdminV1betaRunAccessReportRequest;
    params?: AnalyticsadminPropertiesRunAccessReportParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesRunAccessReport"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesRunAccessReport>>,
    {
      entity: string;
      data: GoogleAnalyticsAdminV1betaRunAccessReportRequest;
      params?: AnalyticsadminPropertiesRunAccessReportParams;
    }
  > = (props) => {
    const { entity, data, params } = props ?? {};

    return analyticsadminPropertiesRunAccessReport(entity, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesRunAccessReportMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesRunAccessReport>>
>;
export type AnalyticsadminPropertiesRunAccessReportMutationBody = GoogleAnalyticsAdminV1betaRunAccessReportRequest;
export type AnalyticsadminPropertiesRunAccessReportMutationError = unknown;

export const useAnalyticsadminPropertiesRunAccessReport = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesRunAccessReport>>,
    TError,
    {
      entity: string;
      data: GoogleAnalyticsAdminV1betaRunAccessReportRequest;
      params?: AnalyticsadminPropertiesRunAccessReportParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesRunAccessReport>>,
  TError,
  {
    entity: string;
    data: GoogleAnalyticsAdminV1betaRunAccessReportRequest;
    params?: AnalyticsadminPropertiesRunAccessReportParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesRunAccessReportMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Deletes a GoogleAdsLink on a property
 */
export const analyticsadminPropertiesGoogleAdsLinksDelete = (
  name: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksDeleteParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<GoogleProtobufEmpty>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/${name}`, method: "DELETE", params },
    options,
  );
};

export const getAnalyticsadminPropertiesGoogleAdsLinksDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksDelete>>,
    TError,
    { name: string; params?: AnalyticsadminPropertiesGoogleAdsLinksDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksDelete>>,
  TError,
  { name: string; params?: AnalyticsadminPropertiesGoogleAdsLinksDeleteParams },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesGoogleAdsLinksDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksDelete>>,
    { name: string; params?: AnalyticsadminPropertiesGoogleAdsLinksDeleteParams }
  > = (props) => {
    const { name, params } = props ?? {};

    return analyticsadminPropertiesGoogleAdsLinksDelete(name, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesGoogleAdsLinksDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksDelete>>
>;

export type AnalyticsadminPropertiesGoogleAdsLinksDeleteMutationError = unknown;

export const useAnalyticsadminPropertiesGoogleAdsLinksDelete = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksDelete>>,
    TError,
    { name: string; params?: AnalyticsadminPropertiesGoogleAdsLinksDeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksDelete>>,
  TError,
  { name: string; params?: AnalyticsadminPropertiesGoogleAdsLinksDeleteParams },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesGoogleAdsLinksDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lookup for a single "GA4" MeasurementProtocolSecret.
 */
export const analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet = (
  name: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaMeasurementProtocolSecret>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/${name}`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetQueryKey = (
  name: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
) => {
  return [`https://analyticsadmin.googleapis.com/v1beta/${name}`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetQueryKey(name, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>
  > = ({ signal }) =>
    analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet(name, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!name, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>
>;
export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetQueryError = unknown;

export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
  TError = unknown,
>(
  name: string,
  params: undefined | AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetQueryOptions(
    name,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetQueryKey(name, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>
  > = ({ signal }) =>
    analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet(name, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>
>;
export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetSuspenseQueryError = unknown;

export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
  TError = unknown,
>(
  name: string,
  params: undefined | AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
  TError = unknown,
>(
  name: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetSuspenseQueryOptions(
    name,
    params,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a GoogleAdsLink on a property
 */
export const analyticsadminPropertiesGoogleAdsLinksPatch = (
  name: string,
  googleAnalyticsAdminV1betaGoogleAdsLink: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>,
  params?: AnalyticsadminPropertiesGoogleAdsLinksPatchParams,
  options?: SecondParameter<typeof fetchClient>,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaGoogleAdsLink>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${name}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaGoogleAdsLink,
      params,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesGoogleAdsLinksPatchMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksPatch>>,
    TError,
    {
      name: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
      params?: AnalyticsadminPropertiesGoogleAdsLinksPatchParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksPatch>>,
  TError,
  {
    name: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
    params?: AnalyticsadminPropertiesGoogleAdsLinksPatchParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesGoogleAdsLinksPatch"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksPatch>>,
    {
      name: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
      params?: AnalyticsadminPropertiesGoogleAdsLinksPatchParams;
    }
  > = (props) => {
    const { name, data, params } = props ?? {};

    return analyticsadminPropertiesGoogleAdsLinksPatch(name, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesGoogleAdsLinksPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksPatch>>
>;
export type AnalyticsadminPropertiesGoogleAdsLinksPatchMutationBody =
  NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
export type AnalyticsadminPropertiesGoogleAdsLinksPatchMutationError = unknown;

export const useAnalyticsadminPropertiesGoogleAdsLinksPatch = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksPatch>>,
    TError,
    {
      name: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
      params?: AnalyticsadminPropertiesGoogleAdsLinksPatchParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksPatch>>,
  TError,
  {
    name: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
    params?: AnalyticsadminPropertiesGoogleAdsLinksPatchParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesGoogleAdsLinksPatchMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Archives a CustomMetric on a property.
 */
export const analyticsadminPropertiesCustomMetricsArchive = (
  name: string,
  googleAnalyticsAdminV1betaArchiveCustomMetricRequest: GoogleAnalyticsAdminV1betaArchiveCustomMetricRequest,
  params?: AnalyticsadminPropertiesCustomMetricsArchiveParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleProtobufEmpty>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${name}:archive`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaArchiveCustomMetricRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesCustomMetricsArchiveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsArchive>>,
    TError,
    {
      name: string;
      data: GoogleAnalyticsAdminV1betaArchiveCustomMetricRequest;
      params?: AnalyticsadminPropertiesCustomMetricsArchiveParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsArchive>>,
  TError,
  {
    name: string;
    data: GoogleAnalyticsAdminV1betaArchiveCustomMetricRequest;
    params?: AnalyticsadminPropertiesCustomMetricsArchiveParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesCustomMetricsArchive"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsArchive>>,
    {
      name: string;
      data: GoogleAnalyticsAdminV1betaArchiveCustomMetricRequest;
      params?: AnalyticsadminPropertiesCustomMetricsArchiveParams;
    }
  > = (props) => {
    const { name, data, params } = props ?? {};

    return analyticsadminPropertiesCustomMetricsArchive(name, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesCustomMetricsArchiveMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsArchive>>
>;
export type AnalyticsadminPropertiesCustomMetricsArchiveMutationBody =
  GoogleAnalyticsAdminV1betaArchiveCustomMetricRequest;
export type AnalyticsadminPropertiesCustomMetricsArchiveMutationError = unknown;

export const useAnalyticsadminPropertiesCustomMetricsArchive = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsArchive>>,
    TError,
    {
      name: string;
      data: GoogleAnalyticsAdminV1betaArchiveCustomMetricRequest;
      params?: AnalyticsadminPropertiesCustomMetricsArchiveParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsArchive>>,
  TError,
  {
    name: string;
    data: GoogleAnalyticsAdminV1betaArchiveCustomMetricRequest;
    params?: AnalyticsadminPropertiesCustomMetricsArchiveParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesCustomMetricsArchiveMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns a list of conversion events in the specified parent property. Returns an empty list if no conversion events are found.
 */
export const analyticsadminPropertiesConversionEventsList = (
  parent: string,
  params?: AnalyticsadminPropertiesConversionEventsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaListConversionEventsResponse>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/conversionEvents`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsadminPropertiesConversionEventsListQueryKey = (
  parent: string,
  params?: AnalyticsadminPropertiesConversionEventsListParams,
) => {
  return [
    `https://analyticsadmin.googleapis.com/v1beta/${parent}/conversionEvents`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAnalyticsadminPropertiesConversionEventsListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesConversionEventsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesConversionEventsListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>> = ({
    signal,
  }) => analyticsadminPropertiesConversionEventsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!parent, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesConversionEventsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>
>;
export type AnalyticsadminPropertiesConversionEventsListQueryError = unknown;

export function useAnalyticsadminPropertiesConversionEventsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesConversionEventsListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesConversionEventsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesConversionEventsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesConversionEventsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesConversionEventsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesConversionEventsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesConversionEventsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesConversionEventsListQueryOptions(parent, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminPropertiesConversionEventsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesConversionEventsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesConversionEventsListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>> = ({
    signal,
  }) => analyticsadminPropertiesConversionEventsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesConversionEventsListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>
>;
export type AnalyticsadminPropertiesConversionEventsListSuspenseQueryError = unknown;

export function useAnalyticsadminPropertiesConversionEventsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesConversionEventsListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesConversionEventsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesConversionEventsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesConversionEventsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesConversionEventsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesConversionEventsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesConversionEventsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesConversionEventsListSuspenseQueryOptions(parent, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a conversion event with the specified attributes.
 */
export const analyticsadminPropertiesConversionEventsCreate = (
  parent: string,
  googleAnalyticsAdminV1betaConversionEvent: NonReadonly<GoogleAnalyticsAdminV1betaConversionEvent>,
  params?: AnalyticsadminPropertiesConversionEventsCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaConversionEvent>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/conversionEvents`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaConversionEvent,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesConversionEventsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaConversionEvent>;
      params?: AnalyticsadminPropertiesConversionEventsCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaConversionEvent>;
    params?: AnalyticsadminPropertiesConversionEventsCreateParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesConversionEventsCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsCreate>>,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaConversionEvent>;
      params?: AnalyticsadminPropertiesConversionEventsCreateParams;
    }
  > = (props) => {
    const { parent, data, params } = props ?? {};

    return analyticsadminPropertiesConversionEventsCreate(parent, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesConversionEventsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsCreate>>
>;
export type AnalyticsadminPropertiesConversionEventsCreateMutationBody =
  NonReadonly<GoogleAnalyticsAdminV1betaConversionEvent>;
export type AnalyticsadminPropertiesConversionEventsCreateMutationError = unknown;

export const useAnalyticsadminPropertiesConversionEventsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaConversionEvent>;
      params?: AnalyticsadminPropertiesConversionEventsCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesConversionEventsCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaConversionEvent>;
    params?: AnalyticsadminPropertiesConversionEventsCreateParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesConversionEventsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists CustomDimensions on a property.
 */
export const analyticsadminPropertiesCustomDimensionsList = (
  parent: string,
  params?: AnalyticsadminPropertiesCustomDimensionsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaListCustomDimensionsResponse>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/customDimensions`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsadminPropertiesCustomDimensionsListQueryKey = (
  parent: string,
  params?: AnalyticsadminPropertiesCustomDimensionsListParams,
) => {
  return [
    `https://analyticsadmin.googleapis.com/v1beta/${parent}/customDimensions`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAnalyticsadminPropertiesCustomDimensionsListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomDimensionsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesCustomDimensionsListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>> = ({
    signal,
  }) => analyticsadminPropertiesCustomDimensionsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!parent, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesCustomDimensionsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>
>;
export type AnalyticsadminPropertiesCustomDimensionsListQueryError = unknown;

export function useAnalyticsadminPropertiesCustomDimensionsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesCustomDimensionsListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesCustomDimensionsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomDimensionsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesCustomDimensionsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomDimensionsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesCustomDimensionsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomDimensionsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesCustomDimensionsListQueryOptions(parent, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminPropertiesCustomDimensionsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomDimensionsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesCustomDimensionsListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>> = ({
    signal,
  }) => analyticsadminPropertiesCustomDimensionsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesCustomDimensionsListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>
>;
export type AnalyticsadminPropertiesCustomDimensionsListSuspenseQueryError = unknown;

export function useAnalyticsadminPropertiesCustomDimensionsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesCustomDimensionsListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesCustomDimensionsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomDimensionsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesCustomDimensionsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomDimensionsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesCustomDimensionsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomDimensionsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesCustomDimensionsListSuspenseQueryOptions(parent, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a CustomDimension.
 */
export const analyticsadminPropertiesCustomDimensionsCreate = (
  parent: string,
  googleAnalyticsAdminV1betaCustomDimension: NonReadonly<GoogleAnalyticsAdminV1betaCustomDimension>,
  params?: AnalyticsadminPropertiesCustomDimensionsCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaCustomDimension>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/customDimensions`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaCustomDimension,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesCustomDimensionsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaCustomDimension>;
      params?: AnalyticsadminPropertiesCustomDimensionsCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaCustomDimension>;
    params?: AnalyticsadminPropertiesCustomDimensionsCreateParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesCustomDimensionsCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsCreate>>,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaCustomDimension>;
      params?: AnalyticsadminPropertiesCustomDimensionsCreateParams;
    }
  > = (props) => {
    const { parent, data, params } = props ?? {};

    return analyticsadminPropertiesCustomDimensionsCreate(parent, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesCustomDimensionsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsCreate>>
>;
export type AnalyticsadminPropertiesCustomDimensionsCreateMutationBody =
  NonReadonly<GoogleAnalyticsAdminV1betaCustomDimension>;
export type AnalyticsadminPropertiesCustomDimensionsCreateMutationError = unknown;

export const useAnalyticsadminPropertiesCustomDimensionsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaCustomDimension>;
      params?: AnalyticsadminPropertiesCustomDimensionsCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomDimensionsCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaCustomDimension>;
    params?: AnalyticsadminPropertiesCustomDimensionsCreateParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesCustomDimensionsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists CustomMetrics on a property.
 */
export const analyticsadminPropertiesCustomMetricsList = (
  parent: string,
  params?: AnalyticsadminPropertiesCustomMetricsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaListCustomMetricsResponse>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/customMetrics`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsadminPropertiesCustomMetricsListQueryKey = (
  parent: string,
  params?: AnalyticsadminPropertiesCustomMetricsListParams,
) => {
  return [`https://analyticsadmin.googleapis.com/v1beta/${parent}/customMetrics`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsadminPropertiesCustomMetricsListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomMetricsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesCustomMetricsListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>> = ({ signal }) =>
    analyticsadminPropertiesCustomMetricsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!parent, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesCustomMetricsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>
>;
export type AnalyticsadminPropertiesCustomMetricsListQueryError = unknown;

export function useAnalyticsadminPropertiesCustomMetricsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesCustomMetricsListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesCustomMetricsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomMetricsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesCustomMetricsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomMetricsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesCustomMetricsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomMetricsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesCustomMetricsListQueryOptions(parent, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminPropertiesCustomMetricsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomMetricsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesCustomMetricsListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>> = ({ signal }) =>
    analyticsadminPropertiesCustomMetricsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesCustomMetricsListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>
>;
export type AnalyticsadminPropertiesCustomMetricsListSuspenseQueryError = unknown;

export function useAnalyticsadminPropertiesCustomMetricsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesCustomMetricsListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesCustomMetricsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomMetricsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesCustomMetricsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomMetricsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesCustomMetricsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesCustomMetricsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesCustomMetricsListSuspenseQueryOptions(parent, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a CustomMetric.
 */
export const analyticsadminPropertiesCustomMetricsCreate = (
  parent: string,
  googleAnalyticsAdminV1betaCustomMetric: NonReadonly<GoogleAnalyticsAdminV1betaCustomMetric>,
  params?: AnalyticsadminPropertiesCustomMetricsCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaCustomMetric>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/customMetrics`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaCustomMetric,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesCustomMetricsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaCustomMetric>;
      params?: AnalyticsadminPropertiesCustomMetricsCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaCustomMetric>;
    params?: AnalyticsadminPropertiesCustomMetricsCreateParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesCustomMetricsCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsCreate>>,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaCustomMetric>;
      params?: AnalyticsadminPropertiesCustomMetricsCreateParams;
    }
  > = (props) => {
    const { parent, data, params } = props ?? {};

    return analyticsadminPropertiesCustomMetricsCreate(parent, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesCustomMetricsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsCreate>>
>;
export type AnalyticsadminPropertiesCustomMetricsCreateMutationBody =
  NonReadonly<GoogleAnalyticsAdminV1betaCustomMetric>;
export type AnalyticsadminPropertiesCustomMetricsCreateMutationError = unknown;

export const useAnalyticsadminPropertiesCustomMetricsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaCustomMetric>;
      params?: AnalyticsadminPropertiesCustomMetricsCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesCustomMetricsCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaCustomMetric>;
    params?: AnalyticsadminPropertiesCustomMetricsCreateParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesCustomMetricsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists DataStreams on a property.
 */
export const analyticsadminPropertiesDataStreamsList = (
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaListDataStreamsResponse>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/dataStreams`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsadminPropertiesDataStreamsListQueryKey = (
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsListParams,
) => {
  return [`https://analyticsadmin.googleapis.com/v1beta/${parent}/dataStreams`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsadminPropertiesDataStreamsListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesDataStreamsListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>> = ({ signal }) =>
    analyticsadminPropertiesDataStreamsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!parent, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesDataStreamsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>
>;
export type AnalyticsadminPropertiesDataStreamsListQueryError = unknown;

export function useAnalyticsadminPropertiesDataStreamsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesDataStreamsListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesDataStreamsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesDataStreamsListQueryOptions(parent, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminPropertiesDataStreamsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesDataStreamsListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>> = ({ signal }) =>
    analyticsadminPropertiesDataStreamsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesDataStreamsListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>
>;
export type AnalyticsadminPropertiesDataStreamsListSuspenseQueryError = unknown;

export function useAnalyticsadminPropertiesDataStreamsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesDataStreamsListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesDataStreamsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesDataStreamsListSuspenseQueryOptions(parent, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a DataStream.
 */
export const analyticsadminPropertiesDataStreamsCreate = (
  parent: string,
  googleAnalyticsAdminV1betaDataStream: NonReadonly<GoogleAnalyticsAdminV1betaDataStream>,
  params?: AnalyticsadminPropertiesDataStreamsCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaDataStream>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/dataStreams`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaDataStream,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesDataStreamsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaDataStream>;
      params?: AnalyticsadminPropertiesDataStreamsCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaDataStream>;
    params?: AnalyticsadminPropertiesDataStreamsCreateParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesDataStreamsCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsCreate>>,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaDataStream>;
      params?: AnalyticsadminPropertiesDataStreamsCreateParams;
    }
  > = (props) => {
    const { parent, data, params } = props ?? {};

    return analyticsadminPropertiesDataStreamsCreate(parent, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesDataStreamsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsCreate>>
>;
export type AnalyticsadminPropertiesDataStreamsCreateMutationBody = NonReadonly<GoogleAnalyticsAdminV1betaDataStream>;
export type AnalyticsadminPropertiesDataStreamsCreateMutationError = unknown;

export const useAnalyticsadminPropertiesDataStreamsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaDataStream>;
      params?: AnalyticsadminPropertiesDataStreamsCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaDataStream>;
    params?: AnalyticsadminPropertiesDataStreamsCreateParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesDataStreamsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink.
 */
export const analyticsadminPropertiesFirebaseLinksList = (
  parent: string,
  params?: AnalyticsadminPropertiesFirebaseLinksListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaListFirebaseLinksResponse>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/firebaseLinks`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsadminPropertiesFirebaseLinksListQueryKey = (
  parent: string,
  params?: AnalyticsadminPropertiesFirebaseLinksListParams,
) => {
  return [`https://analyticsadmin.googleapis.com/v1beta/${parent}/firebaseLinks`, ...(params ? [params] : [])] as const;
};

export const getAnalyticsadminPropertiesFirebaseLinksListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesFirebaseLinksListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesFirebaseLinksListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>> = ({ signal }) =>
    analyticsadminPropertiesFirebaseLinksList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!parent, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesFirebaseLinksListQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>
>;
export type AnalyticsadminPropertiesFirebaseLinksListQueryError = unknown;

export function useAnalyticsadminPropertiesFirebaseLinksList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesFirebaseLinksListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesFirebaseLinksList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesFirebaseLinksListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesFirebaseLinksList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesFirebaseLinksListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesFirebaseLinksList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesFirebaseLinksListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesFirebaseLinksListQueryOptions(parent, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminPropertiesFirebaseLinksListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesFirebaseLinksListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesFirebaseLinksListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>> = ({ signal }) =>
    analyticsadminPropertiesFirebaseLinksList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesFirebaseLinksListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>
>;
export type AnalyticsadminPropertiesFirebaseLinksListSuspenseQueryError = unknown;

export function useAnalyticsadminPropertiesFirebaseLinksListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesFirebaseLinksListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesFirebaseLinksListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesFirebaseLinksListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesFirebaseLinksListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesFirebaseLinksListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesFirebaseLinksListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesFirebaseLinksListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesFirebaseLinksListSuspenseQueryOptions(parent, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a FirebaseLink. Properties can have at most one FirebaseLink.
 */
export const analyticsadminPropertiesFirebaseLinksCreate = (
  parent: string,
  googleAnalyticsAdminV1betaFirebaseLink: NonReadonly<GoogleAnalyticsAdminV1betaFirebaseLink>,
  params?: AnalyticsadminPropertiesFirebaseLinksCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaFirebaseLink>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/firebaseLinks`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaFirebaseLink,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesFirebaseLinksCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaFirebaseLink>;
      params?: AnalyticsadminPropertiesFirebaseLinksCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaFirebaseLink>;
    params?: AnalyticsadminPropertiesFirebaseLinksCreateParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesFirebaseLinksCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksCreate>>,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaFirebaseLink>;
      params?: AnalyticsadminPropertiesFirebaseLinksCreateParams;
    }
  > = (props) => {
    const { parent, data, params } = props ?? {};

    return analyticsadminPropertiesFirebaseLinksCreate(parent, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesFirebaseLinksCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksCreate>>
>;
export type AnalyticsadminPropertiesFirebaseLinksCreateMutationBody =
  NonReadonly<GoogleAnalyticsAdminV1betaFirebaseLink>;
export type AnalyticsadminPropertiesFirebaseLinksCreateMutationError = unknown;

export const useAnalyticsadminPropertiesFirebaseLinksCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaFirebaseLink>;
      params?: AnalyticsadminPropertiesFirebaseLinksCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesFirebaseLinksCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaFirebaseLink>;
    params?: AnalyticsadminPropertiesFirebaseLinksCreateParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesFirebaseLinksCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists GoogleAdsLinks on a property.
 */
export const analyticsadminPropertiesGoogleAdsLinksList = (
  parent: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaListGoogleAdsLinksResponse>(
    { url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/googleAdsLinks`, method: "GET", params, signal },
    options,
  );
};

export const getAnalyticsadminPropertiesGoogleAdsLinksListQueryKey = (
  parent: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksListParams,
) => {
  return [
    `https://analyticsadmin.googleapis.com/v1beta/${parent}/googleAdsLinks`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAnalyticsadminPropertiesGoogleAdsLinksListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesGoogleAdsLinksListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>> = ({ signal }) =>
    analyticsadminPropertiesGoogleAdsLinksList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!parent, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesGoogleAdsLinksListQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>
>;
export type AnalyticsadminPropertiesGoogleAdsLinksListQueryError = unknown;

export function useAnalyticsadminPropertiesGoogleAdsLinksList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesGoogleAdsLinksList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesGoogleAdsLinksList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesGoogleAdsLinksList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesGoogleAdsLinksListQueryOptions(parent, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminPropertiesGoogleAdsLinksListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAnalyticsadminPropertiesGoogleAdsLinksListQueryKey(parent, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>> = ({ signal }) =>
    analyticsadminPropertiesGoogleAdsLinksList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesGoogleAdsLinksListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>
>;
export type AnalyticsadminPropertiesGoogleAdsLinksListSuspenseQueryError = unknown;

export function useAnalyticsadminPropertiesGoogleAdsLinksListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesGoogleAdsLinksListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesGoogleAdsLinksListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesGoogleAdsLinksListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesGoogleAdsLinksListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesGoogleAdsLinksListSuspenseQueryOptions(parent, params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a GoogleAdsLink.
 */
export const analyticsadminPropertiesGoogleAdsLinksCreate = (
  parent: string,
  googleAnalyticsAdminV1betaGoogleAdsLink: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>,
  params?: AnalyticsadminPropertiesGoogleAdsLinksCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaGoogleAdsLink>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/googleAdsLinks`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaGoogleAdsLink,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesGoogleAdsLinksCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
      params?: AnalyticsadminPropertiesGoogleAdsLinksCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
    params?: AnalyticsadminPropertiesGoogleAdsLinksCreateParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesGoogleAdsLinksCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksCreate>>,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
      params?: AnalyticsadminPropertiesGoogleAdsLinksCreateParams;
    }
  > = (props) => {
    const { parent, data, params } = props ?? {};

    return analyticsadminPropertiesGoogleAdsLinksCreate(parent, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesGoogleAdsLinksCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksCreate>>
>;
export type AnalyticsadminPropertiesGoogleAdsLinksCreateMutationBody =
  NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
export type AnalyticsadminPropertiesGoogleAdsLinksCreateMutationError = unknown;

export const useAnalyticsadminPropertiesGoogleAdsLinksCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
      params?: AnalyticsadminPropertiesGoogleAdsLinksCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesGoogleAdsLinksCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaGoogleAdsLink>;
    params?: AnalyticsadminPropertiesGoogleAdsLinksCreateParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesGoogleAdsLinksCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns child MeasurementProtocolSecrets under the specified parent Property.
 */
export const analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList = (
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/measurementProtocolSecrets`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListQueryKey = (
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
) => {
  return [
    `https://analyticsadmin.googleapis.com/v1beta/${parent}/measurementProtocolSecrets`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListQueryKey(parent, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>
  > = ({ signal }) =>
    analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!parent, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>
>;
export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListQueryError = unknown;

export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
          TError,
          Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListQueryOptions(
    parent,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListQueryKey(parent, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>
  > = ({ signal }) =>
    analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList(parent, params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>
>;
export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSuspenseQueryError = unknown;

export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
  TError = unknown,
>(
  parent: string,
  params: undefined | AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSuspense<
  TData = Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
  TError = unknown,
>(
  parent: string,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchClient>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSuspenseQueryOptions(
    parent,
    params,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a measurement protocol secret.
 */
export const analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate = (
  parent: string,
  googleAnalyticsAdminV1betaMeasurementProtocolSecret: NonReadonly<GoogleAnalyticsAdminV1betaMeasurementProtocolSecret>,
  params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaMeasurementProtocolSecret>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${parent}/measurementProtocolSecrets`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaMeasurementProtocolSecret,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaMeasurementProtocolSecret>;
      params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaMeasurementProtocolSecret>;
    params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate>>,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaMeasurementProtocolSecret>;
      params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateParams;
    }
  > = (props) => {
    const { parent, data, params } = props ?? {};

    return analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate(parent, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate>>
>;
export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateMutationBody =
  NonReadonly<GoogleAnalyticsAdminV1betaMeasurementProtocolSecret>;
export type AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateMutationError = unknown;

export const useAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate>>,
    TError,
    {
      parent: string;
      data: NonReadonly<GoogleAnalyticsAdminV1betaMeasurementProtocolSecret>;
      params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate>>,
  TError,
  {
    parent: string;
    data: NonReadonly<GoogleAnalyticsAdminV1betaMeasurementProtocolSecret>;
    params?: AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateParams;
  },
  TContext
> => {
  const mutationOptions =
    getAnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Acknowledges the terms of user data collection for the specified property. This acknowledgement must be completed (either in the Google Analytics UI or through this API) before MeasurementProtocolSecret resources may be created.
 */
export const analyticsadminPropertiesAcknowledgeUserDataCollection = (
  property: string,
  googleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest: GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest,
  params?: AnalyticsadminPropertiesAcknowledgeUserDataCollectionParams,
  options?: SecondParameter<typeof fetchClient>,
  signal?: AbortSignal,
) => {
  return fetchClient<GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionResponse>(
    {
      url: `https://analyticsadmin.googleapis.com/v1beta/${property}:acknowledgeUserDataCollection`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: googleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest,
      params,
      signal,
    },
    options,
  );
};

export const getAnalyticsadminPropertiesAcknowledgeUserDataCollectionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesAcknowledgeUserDataCollection>>,
    TError,
    {
      property: string;
      data: GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest;
      params?: AnalyticsadminPropertiesAcknowledgeUserDataCollectionParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof analyticsadminPropertiesAcknowledgeUserDataCollection>>,
  TError,
  {
    property: string;
    data: GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest;
    params?: AnalyticsadminPropertiesAcknowledgeUserDataCollectionParams;
  },
  TContext
> => {
  const mutationKey = ["analyticsadminPropertiesAcknowledgeUserDataCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof analyticsadminPropertiesAcknowledgeUserDataCollection>>,
    {
      property: string;
      data: GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest;
      params?: AnalyticsadminPropertiesAcknowledgeUserDataCollectionParams;
    }
  > = (props) => {
    const { property, data, params } = props ?? {};

    return analyticsadminPropertiesAcknowledgeUserDataCollection(property, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AnalyticsadminPropertiesAcknowledgeUserDataCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof analyticsadminPropertiesAcknowledgeUserDataCollection>>
>;
export type AnalyticsadminPropertiesAcknowledgeUserDataCollectionMutationBody =
  GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest;
export type AnalyticsadminPropertiesAcknowledgeUserDataCollectionMutationError = unknown;

export const useAnalyticsadminPropertiesAcknowledgeUserDataCollection = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof analyticsadminPropertiesAcknowledgeUserDataCollection>>,
    TError,
    {
      property: string;
      data: GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest;
      params?: AnalyticsadminPropertiesAcknowledgeUserDataCollectionParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof fetchClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof analyticsadminPropertiesAcknowledgeUserDataCollection>>,
  TError,
  {
    property: string;
    data: GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest;
    params?: AnalyticsadminPropertiesAcknowledgeUserDataCollectionParams;
  },
  TContext
> => {
  const mutationOptions = getAnalyticsadminPropertiesAcknowledgeUserDataCollectionMutationOptions(options);

  return useMutation(mutationOptions);
};
